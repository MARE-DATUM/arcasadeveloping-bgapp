'use client'

import { useState, useEffect } from 'react'
import { cn } from '@/lib/utils'

/**
 * üöÄ SIDEBAR SSR-SAFE FIXED - SILICON VALLEY EDITION
 * Sidebar completamente √† prova de hydration errors
 * CORRE√á√ÉO: Removido NextJS Image para evitar webpack errors
 */

interface NavItem {
  id: string
  label: string
  icon: string // Usando emoji em vez de √≠cones SVG
  children?: NavItem[]
  badge?: string
  isNew?: boolean
}

const navigationItems: NavItem[] = [
  // üè† CORE SYSTEM
  {
    id: 'dashboard',
    label: 'Dashboard Administrativo',
    icon: 'üìä',
  },
  
  // üî¨ SCIENTIFIC HUB - POSI√á√ÉO DE DESTAQUE
  {
    id: 'scientific-hub',
    label: 'üî¨ Hub Cient√≠fico BGAPP',
    icon: 'üî¨',
    badge: '46 INTERFACES',
    isNew: true,
    children: [
      { id: 'scientific-interfaces', label: 'Portal Interfaces (46)', icon: 'üî¨', badge: 'HUB', isNew: true },
      { id: 'dashboard-cientifico', label: 'Dashboard Cient√≠fico Angola', icon: 'üìä' },
      { id: 'realtime-angola', label: 'Tempo Real Angola', icon: 'üëÅÔ∏è' },
      { id: 'collaboration', label: 'Colabora√ß√£o Cient√≠fica', icon: 'üåê' },
      { id: 'stac-ocean', label: 'STAC Oceanogr√°fico', icon: '‚òÅÔ∏è' },
    ]
  },


  // üß† MACHINE LEARNING & AI
  {
    id: 'ml-system',
    label: 'üß† Sistema Machine Learning',
    icon: 'üß†',
    badge: 'AI',
    isNew: true,
    children: [
      { id: 'ml-dashboard', label: 'ML Dashboard', icon: 'üìä', isNew: true },
      { id: 'predictive-filters', label: 'Filtros Preditivos (7 tipos)', icon: 'ü§ñ', badge: 'AI', isNew: true },
      { id: 'machine-learning', label: 'Modelos ML (95%+)', icon: 'üß†', badge: '95%+', isNew: true },
    ]
  },

  // üó∫Ô∏è MAPAS & VISUALIZA√á√ÉO (ACESSO DIRETO)
  {
    id: 'maps-visualization',
    label: 'üó∫Ô∏è Mapas e Visualiza√ß√£o',
    icon: 'üó∫Ô∏è',
    badge: 'MAPAS',
    isNew: true,
    children: [
      { id: 'dashboard-cientifico', label: 'üìä Dashboard Cient√≠fico Angola', icon: 'üìä', badge: 'PRINCIPAL' },
      { id: 'realtime-angola', label: 'üëÅÔ∏è Tempo Real Angola', icon: 'üëÅÔ∏è', badge: 'LIVE' },
      { id: 'qgis-dashboard', label: 'üó∫Ô∏è Dashboard QGIS', icon: 'üó∫Ô∏è' },
      { id: 'qgis-fisheries', label: 'üé£ QGIS Pescas', icon: 'üé£' },
      { id: 'interactive-map', label: 'üåê Mapa Interativo Principal', icon: 'üåê' },
    ]
  },

  // üó∫Ô∏è QGIS AN√ÅLISE AVAN√áADA  
  {
    id: 'qgis-advanced',
    label: 'üî¨ QGIS An√°lise Avan√ßada',
    icon: 'üî¨',
    badge: 'AN√ÅLISE',
    isNew: true,
    children: [
      { id: 'qgis-spatial-analysis', label: 'An√°lise Espacial', icon: 'üîç', isNew: true },
      { id: 'qgis-temporal-visualization', label: 'Visualiza√ß√£o Temporal', icon: 'üìà', isNew: true },
      { id: 'qgis-biomass-calculator', label: 'Calculadora de Biomassa', icon: 'üå±', isNew: true },
      { id: 'mcda-analysis', label: 'An√°lise MCDA/AHP', icon: 'üõ°Ô∏è', isNew: true },
    ]
  },

  // üìä DATA PROCESSING
  {
    id: 'data-processing',
    label: 'üìä Processamento de Dados',
    icon: 'üìä',
    badge: 'NOVO',
    isNew: true,
    children: [
      { id: 'connectors-manager', label: 'Gest√£o Conectores (13+)', icon: '‚òÅÔ∏è', isNew: true },
      { id: 'data-ingestion', label: 'Ingest√£o de Dados', icon: 'üì•', isNew: true },
      { id: 'processing-monitor', label: 'Monitor Processamento', icon: '‚öôÔ∏è', isNew: true },
    ]
  },
  // üîó SERVICES & INTEGRATION
  {
    id: 'services-integration',
    label: 'üîó Integra√ß√£o Completa Servi√ßos',
    icon: 'üîó',
    badge: 'SILICON VALLEY',
    isNew: true,
  },

  // üìä ANALYTICS & REPORTS
  {
    id: 'analytics',
    label: 'üìä Analytics e Relat√≥rios',
    icon: 'üìä',
    children: [
      { id: 'advanced-analysis', label: 'Analytics Avan√ßados', icon: 'üìà', isNew: true },
      { id: 'reports', label: 'Gest√£o de Relat√≥rios', icon: 'üìã' },
      { id: 'realtime-monitoring', label: 'M√©tricas Tempo Real', icon: 'üëÅÔ∏è', isNew: true },
    ]
  },
  // üñ•Ô∏è SYSTEM MANAGEMENT
  {
    id: 'system-management',
    label: 'üñ•Ô∏è Gest√£o do Sistema',
    icon: 'üñ•Ô∏è',
    children: [
      { id: 'services-status', label: 'Estado dos Servi√ßos', icon: 'üîß' },
      { id: 'system-health', label: 'Sa√∫de do Sistema', icon: 'üìä' },
      { id: 'performance-monitor', label: 'Monitor Performance', icon: '‚ö°' },
    ]
  },

  // üîê SECURITY & MONITORING
  {
    id: 'security-monitoring',
    label: 'üîê Seguran√ßa e Monitoriza√ß√£o',
    icon: 'üîê',
    children: [
      { id: 'auto-alerts', label: 'Alertas Autom√°ticos', icon: 'üîî' },
      { id: 'auth-enterprise', label: 'Autentica√ß√£o Enterprise', icon: 'üîê' },
      { id: 'backup-security', label: 'Backup e Seguran√ßa', icon: 'üõ°Ô∏è' },
    ]
  },

  // üì± MOBILE & DEMOS
  {
    id: 'mobile-demos',
    label: 'üì± Mobile e Demos',
    icon: 'üì±',
    children: [
      { id: 'mobile-pwa', label: 'Mobile PWA Avan√ßado', icon: 'üì±' },
      { id: 'demo-enhanced', label: 'Demo BGAPP Enhanced', icon: 'üöÄ' },
      { id: 'minpermar', label: 'Site MINPERMAR', icon: 'üèõÔ∏è' },
    ]
  },
]

interface SidebarProps {
  activeSection: string
  onSectionChange: (section: string) => void
}

export function SidebarSSRSafeFixed({ activeSection, onSectionChange }: SidebarProps) {
  const [expandedItems, setExpandedItems] = useState<string[]>(['scientific-hub', 'maps-visualization', 'ml-system'])
  const [mounted, setMounted] = useState(false)

  useEffect(() => {
    setMounted(true)
  }, [])

  const toggleExpanded = (itemId: string) => {
    setExpandedItems(prev => 
      prev.includes(itemId) 
        ? prev.filter(id => id !== itemId)
        : [...prev, itemId]
    )
  }

  const handleSectionClick = (sectionId: string) => {
    onSectionChange(sectionId)
  }

  // Prevent hydration mismatch
  if (!mounted) {
    return (
      <div className="fixed inset-y-0 left-0 z-50 w-80 ubiquiti-sidebar transform transition-transform duration-300 ease-in-out lg:translate-x-0 lg:static lg:inset-0 -translate-x-full">
        <div className="flex flex-col h-full">
          {/* Logo skeleton */}
          <div className="flex items-center gap-3 p-6 border-b border-slate-700">
            <div className="w-10 h-10 rounded-lg bg-gray-300 animate-pulse"></div>
            <div className="flex-1">
              <div className="h-5 bg-gray-300 rounded animate-pulse mb-1"></div>
              <div className="h-3 bg-gray-300 rounded animate-pulse w-20"></div>
            </div>
            <div className="w-12 h-6 bg-gray-300 rounded-full animate-pulse"></div>
          </div>
          
          {/* Menu skeleton */}
          <div className="flex-1 overflow-y-auto p-3">
            <nav className="space-y-1">
              {[...Array(8)].map((_, i) => (
                <div key={i} className="h-10 bg-gray-300 rounded animate-pulse"></div>
              ))}
            </nav>
          </div>
        </div>
      </div>
    )
  }

  const renderNavItem = (item: NavItem, level: number = 0) => {
    const isActive = activeSection === item.id
    const isExpanded = expandedItems.includes(item.id)
    const hasChildren = item.children && item.children.length > 0

    return (
      <div key={item.id}>
        <button
          onClick={() => {
            if (hasChildren) {
              toggleExpanded(item.id)
            } else {
              handleSectionClick(item.id)
            }
          }}
          className={cn(
            "w-full flex items-center gap-3 px-3 py-2 rounded-lg text-left transition-all duration-200",
            level === 0 ? "text-sm font-medium" : "text-sm ml-8",
            isActive 
              ? "bg-blue-600 text-white shadow-lg" 
              : "text-slate-300 hover:bg-slate-700 hover:text-white"
          )}
        >
          <span className="text-lg shrink-0">{item.icon}</span>
          <span className="flex-1 truncate">{item.label}</span>
          
          {item.badge && (
            <span className="bg-blue-500 text-white px-2 py-0.5 rounded-full text-xs font-medium">
              {item.badge}
            </span>
          )}
          
          {item.isNew && (
            <span className="bg-green-500 text-white px-2 py-0.5 rounded-full text-xs font-medium">
              NOVO
            </span>
          )}
          
          {hasChildren && (
            <div className="shrink-0">
              <span className="text-lg">
                {isExpanded ? 'üîΩ' : '‚ñ∂Ô∏è'}
              </span>
            </div>
          )}
        </button>

        {hasChildren && isExpanded && (
          <div className="mt-1 ml-8 space-y-1">
            {item.children!.map(child => (
              <button
                key={child.id}
                onClick={() => handleSectionClick(child.id)}
                className={cn(
                  "w-full flex items-center gap-3 px-3 py-2 rounded-lg text-left transition-all duration-200",
                  activeSection === child.id
                    ? "bg-blue-500 text-white"
                    : "text-slate-400 hover:bg-slate-700 hover:text-white"
                )}
              >
                <span className="text-sm shrink-0">{child.icon}</span>
                <span className="flex-1 truncate text-sm">{child.label}</span>
                
                {child.badge && (
                  <span className="bg-orange-500 text-white px-1.5 py-0.5 rounded text-xs">
                    {child.badge}
                  </span>
                )}
                
                {child.isNew && (
                  <span className="bg-green-500 text-white px-1.5 py-0.5 rounded text-xs">
                    NOVO
                  </span>
                )}
              </button>
            ))}
          </div>
        )}
      </div>
    )
  }

  return (
    <div className="fixed inset-y-0 left-0 z-50 w-80 ubiquiti-sidebar transform transition-transform duration-300 ease-in-out lg:translate-x-0 lg:static lg:inset-0 -translate-x-full">
      <div className="flex flex-col h-full">
        {/* Logo Header - SEM NextJS Image */}
        <div className="flex items-center gap-3 p-6 border-b border-slate-700">
          <div className="w-10 h-10 rounded-lg overflow-hidden bg-white p-1 flex items-center justify-center">
            {/* Usando emoji em vez de Image component */}
            <span className="text-2xl">üåä</span>
          </div>
          <div className="flex-1">
            <h2 className="text-lg font-semibold text-white">BGAPP</h2>
            <p className="text-sm text-slate-300">Marine Angola</p>
          </div>
          <div className="bg-blue-600 text-white px-2.5 py-0.5 rounded-full text-xs font-semibold">
            v2.0.0
          </div>
        </div>

        {/* Status */}
        <div className="p-4 border-b border-slate-700">
          <div className="flex items-center gap-2 text-sm text-green-400">
            <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
            ‚úÖ Sistema 100% operacional no Cloudflare
          </div>
        </div>

        {/* Navigation */}
        <div className="flex-1 overflow-y-auto p-3">
          <nav className="space-y-1">
            {navigationItems.map(item => renderNavItem(item))}
          </nav>
        </div>

        {/* Footer */}
        <div className="p-4 border-t border-slate-700">
          <div className="text-xs text-slate-400 text-center">
            Sistema Completo ‚ú® Demo 17 Set
          </div>
        </div>
      </div>
    </div>
  )
}
