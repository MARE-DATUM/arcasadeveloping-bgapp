"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/lib/api.ts":
/*!************************!*\
  !*** ./src/lib/api.ts ***!
  \************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   acknowledgeAlert: function() { return /* binding */ acknowledgeAlert; },\n/* harmony export */   api: function() { return /* binding */ api; },\n/* harmony export */   clearCache: function() { return /* binding */ clearCache; },\n/* harmony export */   clearLogs: function() { return /* binding */ clearLogs; },\n/* harmony export */   createBackup: function() { return /* binding */ createBackup; },\n/* harmony export */   createUser: function() { return /* binding */ createUser; },\n/* harmony export */   deleteUser: function() { return /* binding */ deleteUser; },\n/* harmony export */   executeQuery: function() { return /* binding */ executeQuery; },\n/* harmony export */   exportAuditData: function() { return /* binding */ exportAuditData; },\n/* harmony export */   generateReport: function() { return /* binding */ generateReport; },\n/* harmony export */   getAPIEndpoints: function() { return /* binding */ getAPIEndpoints; },\n/* harmony export */   getAlerts: function() { return /* binding */ getAlerts; },\n/* harmony export */   getAsyncTasks: function() { return /* binding */ getAsyncTasks; },\n/* harmony export */   getAuditEvents: function() { return /* binding */ getAuditEvents; },\n/* harmony export */   getBackups: function() { return /* binding */ getBackups; },\n/* harmony export */   getBiodiversityStats: function() { return /* binding */ getBiodiversityStats; },\n/* harmony export */   getBiodiversityStudies: function() { return /* binding */ getBiodiversityStudies; },\n/* harmony export */   getCacheStats: function() { return /* binding */ getCacheStats; },\n/* harmony export */   getCoastalAnalysis: function() { return /* binding */ getCoastalAnalysis; },\n/* harmony export */   getConnectorJobs: function() { return /* binding */ getConnectorJobs; },\n/* harmony export */   getConnectors: function() { return /* binding */ getConnectors; },\n/* harmony export */   getDashboardStats: function() { return /* binding */ getDashboardStats; },\n/* harmony export */   getDatabaseTables: function() { return /* binding */ getDatabaseTables; },\n/* harmony export */   getFlowerTaskTypes: function() { return /* binding */ getFlowerTaskTypes; },\n/* harmony export */   getFlowerWorkers: function() { return /* binding */ getFlowerWorkers; },\n/* harmony export */   getKeycloakClients: function() { return /* binding */ getKeycloakClients; },\n/* harmony export */   getKeycloakRealms: function() { return /* binding */ getKeycloakRealms; },\n/* harmony export */   getKeycloakSessions: function() { return /* binding */ getKeycloakSessions; },\n/* harmony export */   getKeycloakUsers: function() { return /* binding */ getKeycloakUsers; },\n/* harmony export */   getLogs: function() { return /* binding */ getLogs; },\n/* harmony export */   getMLModels: function() { return /* binding */ getMLModels; },\n/* harmony export */   getMLStats: function() { return /* binding */ getMLStats; },\n/* harmony export */   getMaritimeBoundaries: function() { return /* binding */ getMaritimeBoundaries; },\n/* harmony export */   getMaxEntModels: function() { return /* binding */ getMaxEntModels; },\n/* harmony export */   getMetricsHistory: function() { return /* binding */ getMetricsHistory; },\n/* harmony export */   getMinIOBucketInfo: function() { return /* binding */ getMinIOBucketInfo; },\n/* harmony export */   getMinIOBucketObjects: function() { return /* binding */ getMinIOBucketObjects; },\n/* harmony export */   getMinIOBuckets: function() { return /* binding */ getMinIOBuckets; },\n/* harmony export */   getPygeoapiCollection: function() { return /* binding */ getPygeoapiCollection; },\n/* harmony export */   getPygeoapiCollections: function() { return /* binding */ getPygeoapiCollections; },\n/* harmony export */   getPygeoapiFeatures: function() { return /* binding */ getPygeoapiFeatures; },\n/* harmony export */   getPygeoapiProcesses: function() { return /* binding */ getPygeoapiProcesses; },\n/* harmony export */   getReports: function() { return /* binding */ getReports; },\n/* harmony export */   getSTACCollection: function() { return /* binding */ getSTACCollection; },\n/* harmony export */   getSTACCollections: function() { return /* binding */ getSTACCollections; },\n/* harmony export */   getSTACItems: function() { return /* binding */ getSTACItems; },\n/* harmony export */   getServices: function() { return /* binding */ getServices; },\n/* harmony export */   getStorageStats: function() { return /* binding */ getStorageStats; },\n/* harmony export */   getSystemConfig: function() { return /* binding */ getSystemConfig; },\n/* harmony export */   getSystemMetrics: function() { return /* binding */ getSystemMetrics; },\n/* harmony export */   getUsers: function() { return /* binding */ getUsers; },\n/* harmony export */   healthCheck: function() { return /* binding */ healthCheck; },\n/* harmony export */   makePrediction: function() { return /* binding */ makePrediction; },\n/* harmony export */   processBoundaries: function() { return /* binding */ processBoundaries; },\n/* harmony export */   restartService: function() { return /* binding */ restartService; },\n/* harmony export */   runCoastalAnalysis: function() { return /* binding */ runCoastalAnalysis; },\n/* harmony export */   runConnector: function() { return /* binding */ runConnector; },\n/* harmony export */   runMaxEntModel: function() { return /* binding */ runMaxEntModel; },\n/* harmony export */   startService: function() { return /* binding */ startService; },\n/* harmony export */   stopService: function() { return /* binding */ stopService; },\n/* harmony export */   trainModel: function() { return /* binding */ trainModel; },\n/* harmony export */   updateSystemConfig: function() { return /* binding */ updateSystemConfig; },\n/* harmony export */   updateUser: function() { return /* binding */ updateUser; },\n/* harmony export */   warmUpCache: function() { return /* binding */ warmUpCache; }\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"(app-pages-browser)/./node_modules/axios/lib/axios.js\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n\n// API Configuration - CORRIGIDO para integração completa\nconst API_BASE_URL = \"http://localhost:8085\" || 0; // Admin API FastAPI\nconst ML_API_URL = \"http://localhost:8000\" || 0; // Same as Admin API\nconst STAC_API_URL = \"http://localhost:8081\" || 0; // STAC API\nconst PYGEOAPI_URL = \"http://localhost:5080\" || 0; // pygeoapi\nconst MINIO_API_URL = process.env.MINIO_API_URL || \"http://localhost:9000\"; // MinIO API\nconst FLOWER_API_URL = process.env.FLOWER_API_URL || \"http://localhost:5555\"; // Flower\nconst KEYCLOAK_URL = process.env.KEYCLOAK_URL || \"http://localhost:8083\"; // Keycloak\n// Create axios instances for all services\nconst adminApi = axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].create({\n    baseURL: API_BASE_URL,\n    timeout: 30000,\n    headers: {\n        \"Content-Type\": \"application/json\"\n    }\n});\nconst mlApi = axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].create({\n    baseURL: ML_API_URL,\n    timeout: 30000,\n    headers: {\n        \"Content-Type\": \"application/json\"\n    }\n});\nconst stacApi = axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].create({\n    baseURL: STAC_API_URL,\n    timeout: 30000,\n    headers: {\n        \"Content-Type\": \"application/json\"\n    }\n});\nconst pygeoapiApi = axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].create({\n    baseURL: PYGEOAPI_URL,\n    timeout: 30000,\n    headers: {\n        \"Content-Type\": \"application/json\"\n    }\n});\nconst minioApi = axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].create({\n    baseURL: MINIO_API_URL,\n    timeout: 30000,\n    headers: {\n        \"Content-Type\": \"application/json\"\n    }\n});\nconst flowerApi = axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].create({\n    baseURL: FLOWER_API_URL,\n    timeout: 30000,\n    headers: {\n        \"Content-Type\": \"application/json\"\n    }\n});\nconst keycloakApi = axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].create({\n    baseURL: KEYCLOAK_URL,\n    timeout: 30000,\n    headers: {\n        \"Content-Type\": \"application/json\"\n    }\n});\n// Request interceptors\nadminApi.interceptors.request.use((config)=>{\n    // Add auth token if available\n    const token = localStorage.getItem(\"admin_token\");\n    if (token) {\n        config.headers.Authorization = \"Bearer \".concat(token);\n    }\n    return config;\n}, (error)=>Promise.reject(error));\nmlApi.interceptors.request.use((config)=>{\n    const token = localStorage.getItem(\"admin_token\");\n    if (token) {\n        config.headers.Authorization = \"Bearer \".concat(token);\n    }\n    return config;\n}, (error)=>Promise.reject(error));\n// Response interceptors - DEFINIR FUNÇÕES PRIMEIRO\nconst handleApiResponse = (response)=>{\n    if (response.data.success) {\n        return response.data.data;\n    }\n    throw new Error(response.data.message || \"API request failed\");\n};\nconst handleApiError = (error)=>{\n    var _error_response, _this, _error_response1;\n    if (((_error_response = error.response) === null || _error_response === void 0 ? void 0 : _error_response.status) === 401) {\n        // Handle unauthorized - redirect to login\n        localStorage.removeItem(\"admin_token\");\n        window.location.href = \"/login\";\n    }\n    const message = ((_this = (_error_response1 = error.response) === null || _error_response1 === void 0 ? void 0 : _error_response1.data) === null || _this === void 0 ? void 0 : _this.message) || error.message || \"Unknown error\";\n    throw new Error(message);\n};\n// Add interceptors for all new API clients\n[\n    stacApi,\n    pygeoapiApi,\n    minioApi,\n    flowerApi,\n    keycloakApi\n].forEach((apiClient)=>{\n    apiClient.interceptors.request.use((config)=>{\n        const token = localStorage.getItem(\"admin_token\");\n        if (token) {\n            config.headers.Authorization = \"Bearer \".concat(token);\n        }\n        return config;\n    }, (error)=>Promise.reject(error));\n    apiClient.interceptors.response.use((response)=>response, handleApiError);\n});\nadminApi.interceptors.response.use((response)=>response, handleApiError);\nmlApi.interceptors.response.use((response)=>response, handleApiError);\n// API Functions\n// Dashboard\nconst getDashboardStats = async ()=>{\n    const response = await adminApi.get(\"/dashboard/stats\");\n    return handleApiResponse(response);\n};\n// Services\nconst getServices = async ()=>{\n    const response = await adminApi.get(\"/services/status\");\n    return handleApiResponse(response);\n};\nconst startService = async (serviceName)=>{\n    const response = await adminApi.post(\"/services/\".concat(serviceName, \"/start\"));\n    handleApiResponse(response);\n};\nconst stopService = async (serviceName)=>{\n    const response = await adminApi.post(\"/services/\".concat(serviceName, \"/stop\"));\n    handleApiResponse(response);\n};\nconst restartService = async (serviceName)=>{\n    const response = await adminApi.post(\"/services/\".concat(serviceName, \"/restart\"));\n    handleApiResponse(response);\n};\n// System Metrics\nconst getSystemMetrics = async ()=>{\n    const response = await adminApi.get(\"/metrics\");\n    return handleApiResponse(response);\n};\nconst getMetricsHistory = async function() {\n    let hours = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 24;\n    const response = await adminApi.get(\"/metrics/history?hours=\".concat(hours));\n    return handleApiResponse(response);\n};\n// Connectors\nconst getConnectors = async ()=>{\n    const response = await adminApi.get(\"/connectors\");\n    return handleApiResponse(response);\n};\nconst runConnector = async (connectorId, config)=>{\n    const response = await adminApi.post(\"/connectors/\".concat(connectorId, \"/run\"), config);\n    return handleApiResponse(response);\n};\nconst getConnectorJobs = async function() {\n    let limit = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 50;\n    const response = await adminApi.get(\"/ingest/jobs?limit=\".concat(limit));\n    return handleApiResponse(response);\n};\n// Machine Learning\nconst getMLModels = async ()=>{\n    const response = await mlApi.get(\"/ml/models\");\n    return handleApiResponse(response);\n};\nconst trainModel = async (modelType)=>{\n    const response = await mlApi.post(\"/ml/train/\".concat(modelType));\n    handleApiResponse(response);\n};\nconst getMLStats = async ()=>{\n    const response = await mlApi.get(\"/ml/stats\");\n    return handleApiResponse(response);\n};\nconst makePrediction = async (modelId, features)=>{\n    const response = await mlApi.post(\"/ml/predict\", {\n        modelId,\n        features\n    });\n    return handleApiResponse(response);\n};\n// Biodiversity Studies\nconst getBiodiversityStudies = async function() {\n    let page = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1, pageSize = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 50;\n    const response = await mlApi.get(\"/biodiversity-studies?page=\".concat(page, \"&pageSize=\").concat(pageSize));\n    return handleApiResponse(response);\n};\nconst getBiodiversityStats = async ()=>{\n    const response = await mlApi.get(\"/biodiversity-studies/stats\");\n    return handleApiResponse(response);\n};\n// MaxEnt Models\nconst getMaxEntModels = async ()=>{\n    const response = await mlApi.get(\"/maxent/models\");\n    return handleApiResponse(response);\n};\nconst runMaxEntModel = async (speciesId)=>{\n    const response = await mlApi.post(\"/maxent/run\", {\n        speciesId\n    });\n    handleApiResponse(response);\n};\n// Database\nconst getDatabaseTables = async function() {\n    let schema = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : \"public\";\n    const response = await adminApi.get(\"/database/tables/\".concat(schema));\n    return handleApiResponse(response);\n};\nconst executeQuery = async (query)=>{\n    const response = await adminApi.post(\"/database/query\", {\n        query\n    });\n    return handleApiResponse(response);\n};\n// STAC Collections - INTEGRAÇÃO NATIVA\nconst getSTACCollections = async ()=>{\n    try {\n        // Tentar STAC API direta primeiro\n        const response = await stacApi.get(\"/collections\");\n        // Converter formato STAC para formato esperado\n        if (response.data && response.data.collections) {\n            return response.data.collections.map((collection)=>{\n                var _collection_summaries;\n                return {\n                    id: collection.id,\n                    title: collection.title || collection.id,\n                    description: collection.description || \"\",\n                    extent: collection.extent,\n                    keywords: collection.keywords || [],\n                    providers: collection.providers || [],\n                    license: collection.license || \"\",\n                    itemCount: ((_collection_summaries = collection.summaries) === null || _collection_summaries === void 0 ? void 0 : _collection_summaries[\"eo:count\"]) || 0,\n                    lastUpdated: new Date().toISOString()\n                };\n            });\n        }\n        // Fallback para Admin API se STAC falhar\n        const fallbackResponse = await adminApi.get(\"/stac/collections\");\n        return handleApiResponse(fallbackResponse);\n    } catch (error) {\n        console.warn(\"STAC API failed, using Admin API fallback:\", error);\n        const response = await adminApi.get(\"/stac/collections\");\n        return handleApiResponse(response);\n    }\n};\nconst getSTACCollection = async (collectionId)=>{\n    try {\n        const response = await stacApi.get(\"/collections/\".concat(collectionId));\n        return response.data;\n    } catch (error) {\n        throw new Error(\"Failed to fetch STAC collection \".concat(collectionId, \": \").concat(error));\n    }\n};\nconst getSTACItems = async function(collectionId) {\n    let limit = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 10;\n    try {\n        const response = await stacApi.get(\"/collections/\".concat(collectionId, \"/items?limit=\").concat(limit));\n        return response.data;\n    } catch (error) {\n        throw new Error(\"Failed to fetch STAC items for \".concat(collectionId, \": \").concat(error));\n    }\n};\n// pygeoapi Integration - OGC API Features\nconst getPygeoapiCollections = async ()=>{\n    try {\n        const response = await pygeoapiApi.get(\"/collections\");\n        return response.data.collections || [];\n    } catch (error) {\n        console.warn(\"pygeoapi failed:\", error);\n        throw new Error(\"Failed to fetch pygeoapi collections: \".concat(error));\n    }\n};\nconst getPygeoapiCollection = async (collectionId)=>{\n    try {\n        const response = await pygeoapiApi.get(\"/collections/\".concat(collectionId));\n        return response.data;\n    } catch (error) {\n        throw new Error(\"Failed to fetch pygeoapi collection \".concat(collectionId, \": \").concat(error));\n    }\n};\nconst getPygeoapiFeatures = async function(collectionId) {\n    let limit = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 100;\n    try {\n        const response = await pygeoapiApi.get(\"/collections/\".concat(collectionId, \"/items?limit=\").concat(limit));\n        return response.data;\n    } catch (error) {\n        throw new Error(\"Failed to fetch features for \".concat(collectionId, \": \").concat(error));\n    }\n};\nconst getPygeoapiProcesses = async ()=>{\n    try {\n        const response = await pygeoapiApi.get(\"/processes\");\n        return response.data.processes || [];\n    } catch (error) {\n        console.warn(\"pygeoapi processes failed:\", error);\n        return [];\n    }\n};\n// MinIO Storage - INTEGRAÇÃO DIRETA\nconst getMinIOBuckets = async ()=>{\n    try {\n        // Tentar acesso direto ao MinIO primeiro\n        const response = await minioApi.get(\"/minio/admin/v3/list-buckets\");\n        return response.data.buckets || [];\n    } catch (error) {\n        console.warn(\"MinIO direct access failed, using Admin API:\", error);\n        // Fallback para Admin API\n        const response = await adminApi.get(\"/storage/buckets\");\n        return handleApiResponse(response);\n    }\n};\nconst getMinIOBucketInfo = async (bucketName)=>{\n    try {\n        const response = await adminApi.get(\"/storage/buckets/\".concat(bucketName, \"/info\"));\n        return handleApiResponse(response);\n    } catch (error) {\n        throw new Error(\"Failed to get bucket info for \".concat(bucketName, \": \").concat(error));\n    }\n};\nconst getMinIOBucketObjects = async (bucketName, prefix)=>{\n    try {\n        const params = prefix ? \"?prefix=\".concat(encodeURIComponent(prefix)) : \"\";\n        const response = await adminApi.get(\"/storage/buckets/\".concat(bucketName, \"/objects\").concat(params));\n        return handleApiResponse(response);\n    } catch (error) {\n        throw new Error(\"Failed to list objects in bucket \".concat(bucketName, \": \").concat(error));\n    }\n};\nconst getStorageStats = async ()=>{\n    const response = await adminApi.get(\"/storage/stats\");\n    return handleApiResponse(response);\n};\n// Cache\nconst getCacheStats = async ()=>{\n    const response = await adminApi.get(\"/cache/stats\");\n    return handleApiResponse(response);\n};\nconst clearCache = async ()=>{\n    const response = await adminApi.post(\"/cache/clear\");\n    handleApiResponse(response);\n};\nconst warmUpCache = async ()=>{\n    const response = await adminApi.post(\"/cache/warmup\");\n    handleApiResponse(response);\n};\n// Celery/Flower Integration - INTEGRAÇÃO NATIVA\nconst getAsyncTasks = async ()=>{\n    try {\n        // Tentar Flower API primeiro\n        const response = await flowerApi.get(\"/api/tasks\");\n        // Converter formato Flower para formato esperado\n        const tasks = Object.entries(response.data || {}).map((param)=>{\n            let [taskId, task] = param;\n            var _task_state;\n            return {\n                id: taskId,\n                name: task.name || \"Unknown Task\",\n                status: ((_task_state = task.state) === null || _task_state === void 0 ? void 0 : _task_state.toLowerCase()) || \"pending\",\n                startTime: task.timestamp ? new Date(task.timestamp * 1000).toISOString() : new Date().toISOString(),\n                endTime: task.received ? new Date(task.received * 1000).toISOString() : undefined,\n                result: task.result,\n                error: task.traceback,\n                worker: task.worker,\n                queue: task.routing_key || \"default\",\n                progress: task.progress || 0\n            };\n        });\n        return tasks;\n    } catch (error) {\n        console.warn(\"Flower API failed, using Admin API:\", error);\n        // Fallback para Admin API\n        const response = await adminApi.get(\"/async/tasks\");\n        return handleApiResponse(response);\n    }\n};\nconst getFlowerWorkers = async ()=>{\n    try {\n        const response = await flowerApi.get(\"/api/workers\");\n        return Object.entries(response.data || {}).map((param)=>{\n            let [name, worker] = param;\n            return {\n                name,\n                status: worker.status || \"offline\",\n                active: worker.active || 0,\n                processed: worker.processed || 0,\n                loadavg: worker.loadavg || [],\n                lastHeartbeat: worker.timestamp ? new Date(worker.timestamp * 1000).toISOString() : null\n            };\n        });\n    } catch (error) {\n        console.warn(\"Failed to fetch Flower workers:\", error);\n        return [];\n    }\n};\nconst getFlowerTaskTypes = async ()=>{\n    try {\n        const response = await flowerApi.get(\"/api/task/types\");\n        return Object.entries(response.data || {}).map((param)=>{\n            let [name, stats] = param;\n            return {\n                name,\n                total: stats.total || 0,\n                success: stats.success || 0,\n                failure: stats.failure || 0,\n                retry: stats.retry || 0\n            };\n        });\n    } catch (error) {\n        console.warn(\"Failed to fetch task types:\", error);\n        return [];\n    }\n};\n// Alerts\nconst getAlerts = async ()=>{\n    const response = await adminApi.get(\"/alerts\");\n    return handleApiResponse(response);\n};\nconst acknowledgeAlert = async (alertId)=>{\n    const response = await adminApi.post(\"/alerts/\".concat(alertId, \"/acknowledge\"));\n    handleApiResponse(response);\n};\n// Backup\nconst getBackups = async ()=>{\n    const response = await adminApi.get(\"/backup\");\n    return handleApiResponse(response);\n};\nconst createBackup = async (type)=>{\n    const response = await adminApi.post(\"/backup/create\", {\n        type\n    });\n    return handleApiResponse(response);\n};\n// Users\nconst getUsers = async ()=>{\n    const response = await adminApi.get(\"/users\");\n    return handleApiResponse(response);\n};\nconst createUser = async (userData)=>{\n    const response = await adminApi.post(\"/users\", userData);\n    return handleApiResponse(response);\n};\nconst updateUser = async (userId, userData)=>{\n    const response = await adminApi.put(\"/users/\".concat(userId), userData);\n    return handleApiResponse(response);\n};\nconst deleteUser = async (userId)=>{\n    const response = await adminApi.delete(\"/users/\".concat(userId));\n    handleApiResponse(response);\n};\n// API Endpoints\nconst getAPIEndpoints = async ()=>{\n    const response = await adminApi.get(\"/api/endpoints\");\n    return handleApiResponse(response);\n};\n// Audit\nconst getAuditEvents = async function() {\n    let page = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1, pageSize = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 50;\n    const response = await adminApi.get(\"/audit/events?page=\".concat(page, \"&pageSize=\").concat(pageSize));\n    return handleApiResponse(response);\n};\nconst exportAuditData = async function() {\n    let hours = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 24;\n    const response = await adminApi.get(\"/audit/export?hours=\".concat(hours), {\n        responseType: \"blob\"\n    });\n    return response.data;\n};\n// Coastal Analysis\nconst getCoastalAnalysis = async ()=>{\n    const response = await adminApi.get(\"/coastal/analysis\");\n    return handleApiResponse(response);\n};\nconst runCoastalAnalysis = async (region)=>{\n    const response = await adminApi.post(\"/coastal/analyze\", {\n        region\n    });\n    return handleApiResponse(response);\n};\n// Maritime Boundaries\nconst getMaritimeBoundaries = async ()=>{\n    const response = await adminApi.get(\"/boundaries\");\n    return handleApiResponse(response);\n};\nconst processBoundaries = async ()=>{\n    const response = await adminApi.post(\"/boundaries/process\");\n    handleApiResponse(response);\n};\n// Reports\nconst getReports = async ()=>{\n    const response = await adminApi.get(\"/reports\");\n    return handleApiResponse(response);\n};\nconst generateReport = async (type, config)=>{\n    const response = await adminApi.post(\"/reports/generate\", {\n        type,\n        config\n    });\n    return handleApiResponse(response);\n};\n// Health Check\nconst healthCheck = async ()=>{\n    const response = await adminApi.get(\"/health\");\n    return handleApiResponse(response);\n};\n// Configuration\nconst getSystemConfig = async ()=>{\n    const response = await adminApi.get(\"/config\");\n    return handleApiResponse(response);\n};\nconst updateSystemConfig = async (config)=>{\n    const response = await adminApi.put(\"/config\", config);\n    handleApiResponse(response);\n};\n// Logs\nconst getLogs = async function(level) {\n    let limit = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 100;\n    const params = new URLSearchParams();\n    if (level) params.append(\"level\", level);\n    params.append(\"limit\", limit.toString());\n    const response = await adminApi.get(\"/logs?\".concat(params));\n    return handleApiResponse(response);\n};\nconst clearLogs = async ()=>{\n    const response = await adminApi.delete(\"/logs\");\n    handleApiResponse(response);\n};\n// Keycloak Integration - INTEGRAÇÃO NATIVA\nconst getKeycloakRealms = async ()=>{\n    try {\n        const response = await keycloakApi.get(\"/admin/realms\");\n        return response.data || [];\n    } catch (error) {\n        console.warn(\"Keycloak API failed:\", error);\n        return [];\n    }\n};\nconst getKeycloakUsers = async function() {\n    let realm = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : \"bgapp\";\n    try {\n        const response = await keycloakApi.get(\"/admin/realms/\".concat(realm, \"/users\"));\n        return response.data || [];\n    } catch (error) {\n        console.warn(\"Failed to fetch Keycloak users:\", error);\n        return [];\n    }\n};\nconst getKeycloakClients = async function() {\n    let realm = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : \"bgapp\";\n    try {\n        const response = await keycloakApi.get(\"/admin/realms/\".concat(realm, \"/clients\"));\n        return response.data || [];\n    } catch (error) {\n        console.warn(\"Failed to fetch Keycloak clients:\", error);\n        return [];\n    }\n};\nconst getKeycloakSessions = async function() {\n    let realm = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : \"bgapp\";\n    try {\n        const response = await keycloakApi.get(\"/admin/realms/\".concat(realm, \"/sessions\"));\n        return response.data || [];\n    } catch (error) {\n        console.warn(\"Failed to fetch Keycloak sessions:\", error);\n        return [];\n    }\n};\n// Export API object for easier importing\nconst api = {\n    // Dashboard\n    getDashboardStats,\n    // Services\n    getServices,\n    startService,\n    stopService,\n    restartService,\n    // Metrics\n    getSystemMetrics,\n    getMetricsHistory,\n    // Connectors\n    getConnectors,\n    runConnector,\n    getConnectorJobs,\n    // Machine Learning\n    getMLModels,\n    trainModel,\n    getMLStats,\n    makePrediction,\n    // Biodiversity\n    getBiodiversityStudies,\n    getBiodiversityStats,\n    // MaxEnt\n    getMaxEntModels,\n    runMaxEntModel,\n    // Database\n    getDatabaseTables,\n    executeQuery,\n    // STAC - INTEGRAÇÃO COMPLETA\n    getSTACCollections,\n    getSTACCollection,\n    getSTACItems,\n    // pygeoapi - INTEGRAÇÃO COMPLETA\n    getPygeoapiCollections,\n    getPygeoapiCollection,\n    getPygeoapiFeatures,\n    getPygeoapiProcesses,\n    // Storage - INTEGRAÇÃO COMPLETA\n    getMinIOBuckets,\n    getMinIOBucketInfo,\n    getMinIOBucketObjects,\n    getStorageStats,\n    // Cache\n    getCacheStats,\n    clearCache,\n    warmUpCache,\n    // Async Tasks - INTEGRAÇÃO COMPLETA\n    getAsyncTasks,\n    getFlowerWorkers,\n    getFlowerTaskTypes,\n    // Alerts\n    getAlerts,\n    acknowledgeAlert,\n    // Backup\n    getBackups,\n    createBackup,\n    // Users\n    getUsers,\n    createUser,\n    updateUser,\n    deleteUser,\n    // API\n    getAPIEndpoints,\n    // Audit\n    getAuditEvents,\n    exportAuditData,\n    // Coastal\n    getCoastalAnalysis,\n    runCoastalAnalysis,\n    // Boundaries\n    getMaritimeBoundaries,\n    processBoundaries,\n    // Reports\n    getReports,\n    generateReport,\n    // System\n    healthCheck,\n    getSystemConfig,\n    updateSystemConfig,\n    // Logs\n    getLogs,\n    clearLogs,\n    // Keycloak - INTEGRAÇÃO COMPLETA\n    getKeycloakRealms,\n    getKeycloakUsers,\n    getKeycloakClients,\n    getKeycloakSessions\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (api);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/api.ts\n"));

/***/ })

});