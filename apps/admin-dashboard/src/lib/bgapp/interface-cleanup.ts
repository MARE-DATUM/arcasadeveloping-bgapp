/**
 * üßπ BGAPP Interface Cleanup - Remo√ß√£o de Duplica√ß√µes
 * Consolida interfaces duplicadas e remove vers√µes de debug
 */

// Interfaces que devem ser removidas ou consolidadas
export const INTERFACES_TO_REMOVE = [
  'realtime_angola_debug',     // Vers√£o de debug
  'realtime_angola_fixed',      // Vers√£o corrigida (usar principal)
  'Tempo Real Debug',           // Debug duplicado
  'Tempo Real Corrigido',       // Vers√£o duplicada
];

// Mapeamento de interfaces duplicadas para a vers√£o principal
export const INTERFACE_MAPPING = {
  'realtime_angola': 'Tempo Real Angola',
  'realtime_angola_debug': 'Tempo Real Angola',
  'realtime_angola_fixed': 'Tempo Real Angola',
  'Tempo Real Debug': 'Tempo Real Angola',
  'Tempo Real Corrigido': 'Tempo Real Angola',
  'Realtime Angola': 'Tempo Real Angola',
};

// Interface √∫nica consolidada
export const CONSOLIDATED_REALTIME_INTERFACE = {
  id: 'realtime-angola',
  name: 'Tempo Real Angola',
  description: 'Dados oceanogr√°ficos em tempo real da costa angolana',
  url: '/realtime_angola.html',
  category: 'monitoring',
  icon: 'üëÅÔ∏è',
  badge: 'LIVE',
  isActive: true,
  features: [
    'Dados em tempo real',
    'Monitoriza√ß√£o cont√≠nua',
    'WebSockets',
    'Visualiza√ß√£o interativa'
  ]
};

/**
 * Limpa duplica√ß√µes de uma lista de interfaces
 */
export function cleanupInterfaces(interfaces: any[]): any[] {
  const seen = new Set<string>();
  const cleaned: any[] = [];
  
  interfaces.forEach(interface_ => {
    const mappedName = INTERFACE_MAPPING[interface_.name] || interface_.name;
    
    // Pular interfaces que devem ser removidas
    if (INTERFACES_TO_REMOVE.includes(interface_.id) || 
        INTERFACES_TO_REMOVE.includes(interface_.name)) {
      return;
    }
    
    // Evitar duplica√ß√µes
    if (!seen.has(mappedName)) {
      seen.add(mappedName);
      
      // Se for Tempo Real Angola, usar a vers√£o consolidada
      if (mappedName === 'Tempo Real Angola') {
        cleaned.push(CONSOLIDATED_REALTIME_INTERFACE);
      } else {
        cleaned.push(interface_);
      }
    }
  });
  
  return cleaned;
}

/**
 * Valida se h√° duplica√ß√µes em uma lista
 */
export function checkForDuplicates(interfaces: any[]): string[] {
  const names = interfaces.map(i => i.name || i.label);
  const duplicates: string[] = [];
  const seen = new Set<string>();
  
  names.forEach(name => {
    if (seen.has(name)) {
      duplicates.push(name);
    } else {
      seen.add(name);
    }
  });
  
  return duplicates;
}

export default {
  cleanupInterfaces,
  checkForDuplicates,
  INTERFACES_TO_REMOVE,
  INTERFACE_MAPPING,
  CONSOLIDATED_REALTIME_INTERFACE
};
