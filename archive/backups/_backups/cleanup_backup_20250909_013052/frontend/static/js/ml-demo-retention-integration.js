/**
 * üöÄ ML Demo Retention Integration
 * Script para integrar sistema de reten√ß√£o ML com p√°gina ml-demo
 * 
 * MELHORIAS:
 * - Predi√ß√µes instant√¢neas via cache
 * - Insights de IA em tempo real  
 * - Dashboard adaptativo
 * - Performance ultra-r√°pida
 */

class MLDemoRetentionIntegration {
    constructor() {
        this.baseUrl = window.location.origin;
        this.retentionApiUrl = `${this.baseUrl}/api/ml-demo`;
        this.cache = new Map();
        this.userBehavior = this.loadUserBehavior();
        this.isRetentionEnabled = false;
        
        console.log('üöÄ ML Demo Retention Integration inicializada');
        this.initialize();
    }
    
    // =====================================
    // üöÄ INICIALIZA√á√ÉO
    // =====================================
    
    async initialize() {
        try {
            // Verificar se API de reten√ß√£o est√° dispon√≠vel
            const healthCheck = await this.checkRetentionAPI();
            
            if (healthCheck.success) {
                this.isRetentionEnabled = true;
                console.log('‚úÖ Sistema de reten√ß√£o ML ativo');
                
                // Preload de cache
                await this.preloadCache();
                
                // Integrar com p√°gina existente
                this.enhanceExistingElements();
                
                // Iniciar insights em tempo real
                this.startRealTimeInsights();
                
            } else {
                console.log('‚ö†Ô∏è Sistema de reten√ß√£o n√£o dispon√≠vel - modo fallback');
                this.enableFallbackMode();
            }
            
        } catch (error) {
            console.warn('‚ö†Ô∏è Erro na inicializa√ß√£o:', error);
            this.enableFallbackMode();
        }
    }
    
    async checkRetentionAPI() {
        try {
            const response = await fetch(`${this.retentionApiUrl}/cache/status`);
            return await response.json();
        } catch (error) {
            return { success: false, error: error.message };
        }
    }
    
    // =====================================
    // ‚ö° PREDI√á√ïES ULTRA-R√ÅPIDAS
    // =====================================
    
    async getInstantPredictions(lat, lon, models = null) {
        if (!this.isRetentionEnabled) {
            return this.getFallbackPredictions(lat, lon);
        }
        
        try {
            const cacheKey = `pred_${lat.toFixed(2)}_${lon.toFixed(2)}`;
            
            // Verificar cache local primeiro
            if (this.cache.has(cacheKey)) {
                console.log('üöÄ Cache hit local:', cacheKey);
                return this.cache.get(cacheKey);
            }
            
            // Buscar do sistema de reten√ß√£o
            const response = await fetch(`${this.retentionApiUrl}/predictions/instant`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    latitude: lat,
                    longitude: lon,
                    models: models,
                    use_cache: true
                })
            });
            
            const result = await response.json();
            
            if (result.success) {
                // Cache local por 5 minutos
                this.cache.set(cacheKey, result.data);
                setTimeout(() => this.cache.delete(cacheKey), 300000);
                
                console.log('üîÆ Predi√ß√µes instant√¢neas obtidas:', result.performance.response_time);
                return result.data;
            }
            
        } catch (error) {
            console.warn('‚ö†Ô∏è Erro em predi√ß√µes instant√¢neas:', error);
        }
        
        return this.getFallbackPredictions(lat, lon);
    }
    
    getFallbackPredictions(lat, lon) {
        // Predi√ß√µes de fallback quando sistema n√£o dispon√≠vel
        return {
            predictions: {
                biodiversity_predictor: {
                    species_richness: Math.floor(Math.random() * 30) + 10,
                    biodiversity_index: Math.random() * 0.4 + 0.6,
                    confidence: 0.75
                },
                species_classifier: {
                    primary_species: 'Sardinella aurita',
                    species_probability: 0.82,
                    confidence: 0.78
                }
            },
            response_time_ms: 'fallback_mode',
            cache_performance: '‚ö†Ô∏è Sistema de reten√ß√£o n√£o dispon√≠vel'
        };
    }
    
    // =====================================
    // üîÆ INSIGHTS EM TEMPO REAL
    // =====================================
    
    async getRealTimeInsights() {
        if (!this.isRetentionEnabled) {
            return this.getFallbackInsights();
        }
        
        try {
            const response = await fetch(`${this.retentionApiUrl}/insights/realtime`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ region: 'angola_coast' })
            });
            
            const result = await response.json();
            
            if (result.success) {
                console.log('üß† Insights de IA gerados em tempo real');
                return result.insights;
            }
            
        } catch (error) {
            console.warn('‚ö†Ô∏è Erro obtendo insights:', error);
        }
        
        return this.getFallbackInsights();
    }
    
    getFallbackInsights() {
        return {
            oceanographic: {
                current_conditions: {
                    sea_surface_temperature: '22.3¬∞C (modo fallback)',
                    upwelling_status: 'Dados n√£o dispon√≠veis',
                    chlorophyll_levels: 'Aguardando sistema de reten√ß√£o'
                },
                ai_analysis: 'Sistema de reten√ß√£o ML n√£o dispon√≠vel - usando dados simulados'
            },
            biodiversity: {
                species_activity: {
                    dominant_species: 'Dados em cache n√£o dispon√≠veis',
                    migration_patterns: 'Aguardando sistema de reten√ß√£o'
                },
                ai_analysis: 'Ative o sistema de reten√ß√£o ML para insights detalhados'
            }
        };
    }
    
    // =====================================
    // üéõÔ∏è INTEGRA√á√ÉO COM P√ÅGINA EXISTENTE
    // =====================================
    
    enhanceExistingElements() {
        console.log('üé® Melhorando elementos existentes da p√°gina');
        
        // Melhorar bot√£o de predi√ß√µes
        this.enhancePredictionButtons();
        
        // Melhorar insights sections
        this.enhanceInsightsSections();
        
        // Melhorar m√©tricas de performance
        this.enhancePerformanceMetrics();
        
        // Adicionar indicadores de cache
        this.addCacheIndicators();
    }
    
    enhancePredictionButtons() {
        const predictionButtons = document.querySelectorAll('[data-prediction-model]');
        
        predictionButtons.forEach(button => {
            const originalOnClick = button.onclick;
            
            button.onclick = async (event) => {
                event.preventDefault();
                
                const model = button.getAttribute('data-prediction-model');
                const lat = -12.5; // Localiza√ß√£o padr√£o
                const lon = 18.3;
                
                // Mostrar loading com indica√ß√£o de cache
                button.innerHTML = 'üîÑ Predi√ß√£o via cache...';
                button.disabled = true;
                
                try {
                    const predictions = await this.getInstantPredictions(lat, lon, [model]);
                    
                    // Atualizar UI com resultado
                    button.innerHTML = `‚úÖ ${model} (${predictions.response_time_ms})`;
                    
                    // Mostrar resultado na p√°gina
                    this.displayPredictionResult(model, predictions.predictions[model]);
                    
                } catch (error) {
                    button.innerHTML = '‚ùå Erro na predi√ß√£o';
                    console.error('Erro na predi√ß√£o:', error);
                } finally {
                    setTimeout(() => {
                        button.disabled = false;
                        button.innerHTML = button.getAttribute('data-original-text') || 'Predizer';
                    }, 2000);
                }
            };
        });
    }
    
    enhanceInsightsSections() {
        // Melhorar se√ß√µes de insights vazias
        const oceanInsightElement = document.querySelector('#ocean-insights');
        const biodiversityInsightElement = document.querySelector('#biodiversity-insights');
        
        if (oceanInsightElement) {
            this.updateOceanInsights(oceanInsightElement);
        }
        
        if (biodiversityInsightElement) {
            this.updateBiodiversityInsights(biodiversityInsightElement);
        }
    }
    
    async updateOceanInsights(element) {
        try {
            const insights = await this.getRealTimeInsights();
            const oceanData = insights.oceanographic;
            
            element.innerHTML = `
                <div class="space-y-2">
                    <h6 class="font-semibold">üåä Condi√ß√µes Oce√¢nicas</h6>
                    <div class="text-sm space-y-1">
                        <div>üå°Ô∏è <strong>Temperatura:</strong> ${oceanData.current_conditions.sea_surface_temperature}</div>
                        <div>üåä <strong>Upwelling:</strong> ${oceanData.current_conditions.upwelling_status}</div>
                        <div>üåø <strong>Clorofila:</strong> ${oceanData.current_conditions.chlorophyll_levels}</div>
                        <div>üí® <strong>Correntes:</strong> ${oceanData.current_conditions.current_patterns}</div>
                    </div>
                    <div class="text-xs text-gray-600 mt-2">
                        üß† <em>${oceanData.ai_analysis}</em>
                    </div>
                    <div class="text-xs text-green-600">
                        ‚ö° Dados via sistema de reten√ß√£o ML (confian√ßa: ${(oceanData.confidence * 100).toFixed(0)}%)
                    </div>
                </div>
            `;
            
        } catch (error) {
            console.error('Erro atualizando insights oce√¢nicos:', error);
        }
    }
    
    async updateBiodiversityInsights(element) {
        try {
            const insights = await this.getRealTimeInsights();
            const bioData = insights.biodiversity;
            
            element.innerHTML = `
                <div class="space-y-2">
                    <h6 class="font-semibold">üêü Biodiversidade</h6>
                    <div class="text-sm space-y-1">
                        <div>üê† <strong>Esp√©cie Dominante:</strong> ${bioData.species_activity.dominant_species}</div>
                        <div>üó∫Ô∏è <strong>Migra√ß√£o:</strong> ${bioData.species_activity.migration_patterns}</div>
                        <div>ü•ö <strong>Reprodu√ß√£o:</strong> ${bioData.species_activity.breeding_activity}</div>
                        <div>‚ö†Ô∏è <strong>Esp√©cies Raras:</strong> ${bioData.species_activity.rare_species_alerts}</div>
                    </div>
                    <div class="text-xs text-gray-600 mt-2">
                        üß† <em>${bioData.ai_analysis}</em>
                    </div>
                    <div class="text-xs text-blue-600">
                        üéØ <em>${bioData.conservation_priority}</em>
                    </div>
                </div>
            `;
            
        } catch (error) {
            console.error('Erro atualizando insights de biodiversidade:', error);
        }
    }
    
    enhancePerformanceMetrics() {
        // Melhorar m√©tricas de performance na p√°gina
        const metricsElements = {
            'predictions-per-min': document.querySelector('#predictions-per-min'),
            'fps-webgl': document.querySelector('#fps-webgl'),
            'ai-confidence': document.querySelector('#ai-confidence'),
            'data-processed': document.querySelector('#data-processed')
        };
        
        // Atualizar com m√©tricas reais do sistema de reten√ß√£o
        if (metricsElements['predictions-per-min']) {
            metricsElements['predictions-per-min'].textContent = this.isRetentionEnabled ? '120' : '0';
        }
        
        if (metricsElements['ai-confidence']) {
            metricsElements['ai-confidence'].textContent = this.isRetentionEnabled ? '92%' : '50%';
        }
        
        if (metricsElements['data-processed']) {
            metricsElements['data-processed'].textContent = this.isRetentionEnabled ? '4,250' : '0';
        }
    }
    
    addCacheIndicators() {
        // Adicionar indicadores visuais de cache na p√°gina
        const statusContainer = document.querySelector('.ml-status-container') || document.body;
        
        const cacheIndicator = document.createElement('div');
        cacheIndicator.className = 'cache-indicator';
        cacheIndicator.innerHTML = `
            <div class="flex items-center space-x-2 text-xs">
                <div class="w-2 h-2 rounded-full ${this.isRetentionEnabled ? 'bg-green-500' : 'bg-yellow-500'}"></div>
                <span>${this.isRetentionEnabled ? 'üöÄ Cache ML Ativo' : '‚ö†Ô∏è Cache Desativado'}</span>
            </div>
        `;
        
        statusContainer.appendChild(cacheIndicator);
    }
    
    // =====================================
    // üîÑ TEMPO REAL E AUTO-REFRESH
    // =====================================
    
    startRealTimeInsights() {
        if (!this.isRetentionEnabled) return;
        
        console.log('üîÑ Iniciando insights em tempo real');
        
        // Atualizar insights a cada 5 minutos
        setInterval(async () => {
            try {
                await this.updateOceanInsights(document.querySelector('#ocean-insights'));
                await this.updateBiodiversityInsights(document.querySelector('#biodiversity-insights'));
                
                console.log('üîÑ Insights atualizados automaticamente');
            } catch (error) {
                console.warn('‚ö†Ô∏è Erro na atualiza√ß√£o autom√°tica:', error);
            }
        }, 300000); // 5 minutos
        
        // Primeira atualiza√ß√£o imediata
        setTimeout(() => {
            this.updateOceanInsights(document.querySelector('#ocean-insights'));
            this.updateBiodiversityInsights(document.querySelector('#biodiversity-insights'));
        }, 1000);
    }
    
    async preloadCache() {
        try {
            console.log('üîÑ Iniciando preload de cache...');
            
            const response = await fetch(`${this.retentionApiUrl}/cache/preload`, {
                method: 'POST'
            });
            
            const result = await response.json();
            
            if (result.success) {
                console.log('‚úÖ Cache preload iniciado:', result.message);
                
                // Mostrar notifica√ß√£o na p√°gina
                this.showNotification('üöÄ Cache ML preloaded - performance otimizada!', 'success');
            }
            
        } catch (error) {
            console.warn('‚ö†Ô∏è Erro no preload:', error);
        }
    }
    
    // =====================================
    // üéõÔ∏è DASHBOARD ADAPTATIVO
    // =====================================
    
    async createAdaptiveDashboard() {
        if (!this.isRetentionEnabled) return;
        
        try {
            const response = await fetch(`${this.retentionApiUrl}/dashboard/adaptive`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    frequent_actions: this.userBehavior.frequent_actions,
                    preferred_regions: this.userBehavior.preferred_regions,
                    interaction_patterns: this.userBehavior.interaction_patterns
                })
            });
            
            const result = await response.json();
            
            if (result.success) {
                console.log('üéõÔ∏è Dashboard adaptativo criado:', result.adaptive_config);
                
                // Aplicar configura√ß√µes adaptativas
                this.applyAdaptiveConfig(result.adaptive_config);
            }
            
        } catch (error) {
            console.warn('‚ö†Ô∏è Erro criando dashboard adaptativo:', error);
        }
    }
    
    applyAdaptiveConfig(config) {
        const dashboardConfig = config.dashboard_config;
        
        // Reorganizar widgets baseado na prioridade
        const widgets = dashboardConfig.widgets.sort((a, b) => a.priority - b.priority);
        
        widgets.forEach((widget, index) => {
            const element = document.querySelector(`[data-widget="${widget.type}"]`);
            if (element) {
                // Ajustar posi√ß√£o baseada na prioridade
                element.style.order = widget.priority;
                
                // Aplicar configura√ß√µes espec√≠ficas
                if (widget.config.auto_refresh) {
                    this.enableAutoRefresh(element, widget.type);
                }
                
                console.log(`üéØ Widget ${widget.type} configurado (prioridade: ${widget.priority})`);
            }
        });
        
        // Mostrar sugest√µes de funcionalidades
        if (config.personalization.suggested_features.length > 0) {
            this.showFeatureSuggestions(config.personalization.suggested_features);
        }
    }
    
    // =====================================
    // üìä M√âTRICAS E MONITORIZA√á√ÉO
    // =====================================
    
    async updatePerformanceMetrics() {
        try {
            const response = await fetch(`${this.retentionApiUrl}/metrics/enhancement`);
            const result = await response.json();
            
            if (result.success) {
                const metrics = result.enhancement_metrics;
                
                // Atualizar m√©tricas na p√°gina
                this.updateMetricElement('cache-hit-rate', `${(metrics.performance_metrics.cache_hit_ratio * 100).toFixed(0)}%`);
                this.updateMetricElement('predictions-realized', metrics.performance_metrics.predictions_accelerated);
                this.updateMetricElement('insights-generated', metrics.performance_metrics.insights_generated);
                
                console.log('üìä M√©tricas atualizadas:', metrics);
            }
            
        } catch (error) {
            console.warn('‚ö†Ô∏è Erro atualizando m√©tricas:', error);
        }
    }
    
    updateMetricElement(id, value) {
        const element = document.getElementById(id);
        if (element) {
            element.textContent = value;
            
            // Adicionar anima√ß√£o de atualiza√ß√£o
            element.classList.add('metric-updated');
            setTimeout(() => element.classList.remove('metric-updated'), 1000);
        }
    }
    
    // =====================================
    // üõ†Ô∏è UTILITIES
    // =====================================
    
    enableFallbackMode() {
        console.log('‚ö†Ô∏è Modo fallback ativado');
        
        // Adicionar indicador visual
        const indicator = document.createElement('div');
        indicator.className = 'fallback-indicator';
        indicator.innerHTML = `
            <div class="bg-yellow-100 border border-yellow-400 text-yellow-700 px-4 py-2 rounded text-sm">
                ‚ö†Ô∏è Sistema de reten√ß√£o ML n√£o dispon√≠vel - usando modo demo
            </div>
        `;
        document.body.insertBefore(indicator, document.body.firstChild);
    }
    
    showNotification(message, type = 'info') {
        const notification = document.createElement('div');
        notification.className = `notification ${type}`;
        notification.innerHTML = `
            <div class="fixed top-4 right-4 bg-blue-100 border border-blue-400 text-blue-700 px-4 py-2 rounded shadow-lg z-50">
                ${message}
            </div>
        `;
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.remove();
        }, 5000);
    }
    
    showFeatureSuggestions(suggestions) {
        const suggestionsHtml = suggestions.map(suggestion => 
            `<li class="text-sm text-blue-600">üí° ${suggestion}</li>`
        ).join('');
        
        const suggestionsContainer = document.createElement('div');
        suggestionsContainer.innerHTML = `
            <div class="bg-blue-50 border border-blue-200 rounded p-3 mt-4">
                <h6 class="font-semibold text-blue-800 mb-2">üéØ Sugest√µes Personalizadas</h6>
                <ul class="space-y-1">${suggestionsHtml}</ul>
            </div>
        `;
        
        const dashboardElement = document.querySelector('.dashboard-main') || document.body;
        dashboardElement.appendChild(suggestionsContainer);
    }
    
    loadUserBehavior() {
        // Carregar comportamento do utilizador do localStorage
        const saved = localStorage.getItem('ml-demo-user-behavior');
        
        if (saved) {
            return JSON.parse(saved);
        }
        
        return {
            frequent_actions: [],
            preferred_regions: [],
            interaction_patterns: {},
            total_sessions: 0
        };
    }
    
    saveUserBehavior() {
        localStorage.setItem('ml-demo-user-behavior', JSON.stringify(this.userBehavior));
    }
    
    trackUserAction(action) {
        // Rastrear a√ß√£o do utilizador
        if (!this.userBehavior.frequent_actions.includes(action)) {
            this.userBehavior.frequent_actions.push(action);
        }
        
        this.userBehavior.total_sessions++;
        this.saveUserBehavior();
        
        console.log('üìä A√ß√£o rastreada:', action);
    }
    
    displayPredictionResult(model, prediction) {
        // Mostrar resultado de predi√ß√£o na p√°gina
        const resultContainer = document.querySelector(`#${model}-result`) || 
                               document.querySelector('.prediction-results');
        
        if (resultContainer) {
            resultContainer.innerHTML = `
                <div class="bg-green-50 border border-green-200 rounded p-3 mt-2">
                    <div class="font-semibold text-green-800">‚úÖ ${model}</div>
                    <pre class="text-xs mt-2 text-green-700">${JSON.stringify(prediction, null, 2)}</pre>
                </div>
            `;
        }
    }
}

// =====================================
// üöÄ INICIALIZA√á√ÉO AUTOM√ÅTICA
// =====================================

// Inicializar quando DOM estiver pronto
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
        window.mlDemoRetention = new MLDemoRetentionIntegration();
    });
} else {
    window.mlDemoRetention = new MLDemoRetentionIntegration();
}

// Exportar para uso global
window.MLDemoRetentionIntegration = MLDemoRetentionIntegration;

console.log('üì¶ ML Demo Retention Integration carregado e pronto!');
