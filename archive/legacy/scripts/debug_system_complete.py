#!/usr/bin/env python3
"""
üîß Sistema de Debug Completo BGAPP
Diagn√≥stico avan√ßado e corre√ß√£o autom√°tica de problemas
"""

import asyncio
import json
import subprocess
import time
import requests
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Optional, Tuple
import docker

class BGAPPDebugger:
    """Sistema de debug completo para BGAPP"""
    
    def __init__(self):
        self.docker_client = None
        self.debug_results = {
            'timestamp': datetime.now().isoformat(),
            'services': {},
            'containers': {},
            'network': {},
            'routing': {},
            'issues': [],
            'fixes_applied': []
        }
        
        # Inicializar cliente Docker
        try:
            self.docker_client = docker.from_env()
            print("‚úÖ Docker client inicializado")
        except Exception as e:
            print(f"‚ùå Docker n√£o dispon√≠vel: {e}")
    
    def check_ports(self) -> Dict[str, bool]:
        """Verificar se as portas est√£o ativas"""
        print("\nüîå VERIFICANDO PORTAS...")
        
        ports = {
            '8085': 'Frontend',
            '8000': 'Admin API', 
            '5080': 'PyGeoAPI',
            '5432': 'PostgreSQL',
            '9000': 'MinIO',
            '8081': 'STAC API',
            '8083': 'Keycloak'
        }
        
        port_status = {}
        
        for port, service in ports.items():
            try:
                result = subprocess.run(['netstat', '-an'], capture_output=True, text=True)
                if f'*.{port}' in result.stdout or f':{port}' in result.stdout:
                    port_status[port] = True
                    print(f"  ‚úÖ {service} ({port}): LISTENING")
                else:
                    port_status[port] = False
                    print(f"  ‚ùå {service} ({port}): NOT LISTENING")
                    self.debug_results['issues'].append(f"Porta {port} ({service}) n√£o est√° ativa")
            except Exception as e:
                port_status[port] = False
                print(f"  ‚ùå {service} ({port}): ERROR - {e}")
        
        self.debug_results['network']['ports'] = port_status
        return port_status
    
    def check_containers(self) -> Dict[str, Dict]:
        """Verificar status dos containers Docker"""
        print("\nüê≥ VERIFICANDO CONTAINERS...")
        
        if not self.docker_client:
            print("‚ùå Docker client n√£o dispon√≠vel")
            return {}
        
        container_status = {}
        
        try:
            containers = self.docker_client.containers.list(all=True, filters={"name": "infra-"})
            
            for container in containers:
                name = container.name
                status = container.status
                health = getattr(container.attrs['State'], 'Health', {}).get('Status', 'no-health-check')
                
                container_info = {
                    'status': status,
                    'health': health,
                    'ports': container.ports,
                    'created': container.attrs['Created'],
                    'image': container.image.tags[0] if container.image.tags else 'unknown'
                }
                
                container_status[name] = container_info
                
                # Log do status
                health_icon = "‚úÖ" if health == "healthy" else "‚ö†Ô∏è" if health == "unhealthy" else "‚ûñ"
                status_icon = "‚úÖ" if status == "running" else "‚ùå"
                
                print(f"  {status_icon} {name}: {status}")
                print(f"    Health: {health_icon} {health}")
                
                # Identificar problemas
                if status != "running":
                    self.debug_results['issues'].append(f"Container {name} n√£o est√° rodando: {status}")
                elif health == "unhealthy":
                    self.debug_results['issues'].append(f"Container {name} n√£o est√° saud√°vel")
        
        except Exception as e:
            print(f"‚ùå Erro ao verificar containers: {e}")
        
        self.debug_results['containers'] = container_status
        return container_status
    
    async def check_http_services(self) -> Dict[str, Dict]:
        """Verificar servi√ßos HTTP"""
        print("\nüåê VERIFICANDO SERVI√áOS HTTP...")
        
        services = {
            'frontend': {
                'url': 'http://localhost:8085',
                'endpoint': '/',
                'expected_content': 'BGAPP'
            },
            'admin_frontend': {
                'url': 'http://localhost:8085/admin.html',
                'endpoint': '',
                'expected_content': 'Painel Administrativo'
            },
            'admin_api': {
                'url': 'http://localhost:8000',
                'endpoint': '/admin-api/services/status',
                'expected_content': 'services'
            },
            'pygeoapi': {
                'url': 'http://localhost:5080',
                'endpoint': '/collections',
                'expected_content': 'collections'
            },
            'minio': {
                'url': 'http://localhost:9000',
                'endpoint': '/minio/health/live',
                'expected_content': None
            },
            'stac': {
                'url': 'http://localhost:8081',
                'endpoint': '/health',
                'expected_content': None
            }
        }
        
        service_status = {}
        
        for service_name, config in services.items():
            try:
                full_url = config['url'] + config['endpoint']
                
                start_time = time.time()
                response = requests.get(full_url, timeout=10)
                response_time = time.time() - start_time
                
                service_info = {
                    'status_code': response.status_code,
                    'response_time': response_time,
                    'accessible': response.status_code == 200,
                    'content_check': True
                }
                
                # Verificar conte√∫do esperado
                if config['expected_content']:
                    content_check = config['expected_content'].lower() in response.text.lower()
                    service_info['content_check'] = content_check
                    
                    if not content_check:
                        self.debug_results['issues'].append(f"Servi√ßo {service_name} n√£o retorna conte√∫do esperado")
                
                if response.status_code == 200:
                    print(f"  ‚úÖ {service_name}: OK ({response_time:.2f}s)")
                else:
                    print(f"  ‚ùå {service_name}: HTTP {response.status_code}")
                    self.debug_results['issues'].append(f"Servi√ßo {service_name} retorna HTTP {response.status_code}")
                
                service_status[service_name] = service_info
                
            except requests.exceptions.ConnectionError:
                print(f"  ‚ùå {service_name}: CONNECTION REFUSED")
                service_status[service_name] = {'accessible': False, 'error': 'Connection refused'}
                self.debug_results['issues'].append(f"Servi√ßo {service_name} n√£o aceita conex√µes")
            except requests.exceptions.Timeout:
                print(f"  ‚è±Ô∏è {service_name}: TIMEOUT")
                service_status[service_name] = {'accessible': False, 'error': 'Timeout'}
                self.debug_results['issues'].append(f"Servi√ßo {service_name} tem timeout")
            except Exception as e:
                print(f"  ‚ùå {service_name}: ERROR - {e}")
                service_status[service_name] = {'accessible': False, 'error': str(e)}
        
        self.debug_results['services'] = service_status
        return service_status
    
    def check_routing(self) -> Dict[str, bool]:
        """Verificar roteamento espec√≠fico"""
        print("\nüó∫Ô∏è VERIFICANDO ROTEAMENTO...")
        
        routes = {
            'index_root': 'http://localhost:8085/',
            'admin_direct': 'http://localhost:8085/admin.html',
            'admin_bgapp_path': 'http://localhost:8085/BGAPP/admin.html',
            'api_status': 'http://localhost:8000/admin-api/services/status',
            'pygeoapi_collections': 'http://localhost:5080/collections'
        }
        
        routing_status = {}
        
        for route_name, url in routes.items():
            try:
                response = requests.get(url, timeout=5)
                routing_status[route_name] = {
                    'accessible': response.status_code == 200,
                    'status_code': response.status_code,
                    'url': url
                }
                
                if response.status_code == 200:
                    print(f"  ‚úÖ {route_name}: OK")
                else:
                    print(f"  ‚ùå {route_name}: HTTP {response.status_code}")
                    
            except Exception as e:
                routing_status[route_name] = {
                    'accessible': False,
                    'error': str(e),
                    'url': url
                }
                print(f"  ‚ùå {route_name}: ERROR - {e}")
        
        self.debug_results['routing'] = routing_status
        return routing_status
    
    def fix_unhealthy_containers(self):
        """Corrigir containers n√£o saud√°veis"""
        print("\nüîß CORRIGINDO CONTAINERS PROBLEM√ÅTICOS...")
        
        if not self.docker_client:
            print("‚ùå Docker client n√£o dispon√≠vel")
            return
        
        try:
            containers = self.docker_client.containers.list(filters={"name": "infra-"})
            
            for container in containers:
                # Verificar health status
                health = getattr(container.attrs['State'], 'Health', {}).get('Status', 'no-health-check')
                
                if health == 'unhealthy':
                    print(f"üîÑ Reiniciando container n√£o saud√°vel: {container.name}")
                    container.restart()
                    self.debug_results['fixes_applied'].append(f"Reiniciado container {container.name}")
                    time.sleep(5)
        
        except Exception as e:
            print(f"‚ùå Erro ao corrigir containers: {e}")
    
    def create_healthcheck_script(self):
        """Criar script de healthcheck melhorado"""
        print("\nüè• CRIANDO SCRIPT DE HEALTHCHECK MELHORADO...")
        
        healthcheck_script = '''#!/bin/bash

# üè• BGAPP Healthcheck Script
# Verifica sa√∫de de todos os servi√ßos e corrige problemas automaticamente

echo "üè• BGAPP Healthcheck - $(date)"
echo "================================"

# Fun√ß√£o para verificar servi√ßo HTTP
check_http_service() {
    local name="$1"
    local url="$2"
    local expected="$3"
    
    if curl -f -s "$url" | grep -q "$expected" 2>/dev/null; then
        echo "  ‚úÖ $name: OK"
        return 0
    else
        echo "  ‚ùå $name: FALHOU"
        return 1
    fi
}

# Verificar servi√ßos cr√≠ticos
echo "üîç Verificando servi√ßos cr√≠ticos..."

check_http_service "Frontend" "http://localhost:8085" "BGAPP"
check_http_service "Admin Panel" "http://localhost:8085/admin.html" "Administrativo"
check_http_service "Admin API" "http://localhost:8000/admin-api/services/status" "services"
check_http_service "PyGeoAPI" "http://localhost:5080/collections" "collections"

# Verificar containers Docker
echo ""
echo "üê≥ Verificando containers..."
docker compose -f infra/docker-compose.yml ps --format "table {{.Name}}\\t{{.Status}}\\t{{.Ports}}"

# Reiniciar servi√ßos problem√°ticos
echo ""
echo "üîß Verificando e corrigindo problemas..."

# Se admin API n√£o responde, reiniciar
if ! curl -f -s http://localhost:8000/admin-api/services/status > /dev/null 2>&1; then
    echo "üîÑ Reiniciando Admin API..."
    pkill -f admin_api_simple.py 2>/dev/null || true
    sleep 2
    python3 admin_api_simple.py &
    echo "‚úÖ Admin API reiniciado"
fi

# Se frontend n√£o responde, reiniciar container
if ! curl -f -s http://localhost:8085 > /dev/null 2>&1; then
    echo "üîÑ Reiniciando Frontend..."
    docker compose -f infra/docker-compose.yml restart frontend
    echo "‚úÖ Frontend reiniciado"
fi

echo ""
echo "‚úÖ Healthcheck completo!"
'''
        
        # Salvar script
        script_path = Path('scripts/healthcheck.sh')
        with open(script_path, 'w') as f:
            f.write(healthcheck_script)
        
        # Tornar execut√°vel
        script_path.chmod(0o755)
        
        print(f"‚úÖ Script de healthcheck criado: {script_path}")
        self.debug_results['fixes_applied'].append("Script healthcheck.sh criado")
    
    def create_auto_recovery_service(self):
        """Criar servi√ßo de recupera√ß√£o autom√°tica"""
        print("\nü§ñ CRIANDO SERVI√áO DE RECUPERA√á√ÉO AUTOM√ÅTICA...")
        
        recovery_script = '''#!/usr/bin/env python3
"""
ü§ñ BGAPP Auto Recovery Service
Monitora e recupera automaticamente servi√ßos com problemas
"""

import time
import requests
import subprocess
import logging
from datetime import datetime

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class AutoRecovery:
    def __init__(self):
        self.services = {
            'frontend': 'http://localhost:8085',
            'admin_api': 'http://localhost:8000/admin-api/services/status',
            'pygeoapi': 'http://localhost:5080/collections'
        }
        self.failure_counts = {service: 0 for service in self.services}
        self.max_failures = 3
    
    def check_service(self, name: str, url: str) -> bool:
        """Verificar se servi√ßo est√° funcionando"""
        try:
            response = requests.get(url, timeout=10)
            return response.status_code == 200
        except:
            return False
    
    def restart_service(self, service_name: str) -> bool:
        """Reiniciar servi√ßo espec√≠fico"""
        logger.warning(f"Reiniciando {service_name}...")
        
        try:
            if service_name == 'frontend':
                subprocess.run(['docker', 'compose', '-f', 'infra/docker-compose.yml', 'restart', 'frontend'])
            elif service_name == 'admin_api':
                subprocess.run(['pkill', '-f', 'admin_api_simple.py'])
                time.sleep(2)
                subprocess.Popen(['python3', 'admin_api_simple.py'])
            elif service_name == 'pygeoapi':
                subprocess.run(['docker', 'compose', '-f', 'infra/docker-compose.yml', 'restart', 'pygeoapi'])
            
            logger.info(f"‚úÖ {service_name} reiniciado")
            return True
        except Exception as e:
            logger.error(f"‚ùå Erro ao reiniciar {service_name}: {e}")
            return False
    
    def run(self):
        """Executar monitoriza√ß√£o cont√≠nua"""
        logger.info("ü§ñ Iniciando Auto Recovery Service...")
        
        while True:
            try:
                for service_name, url in self.services.items():
                    if self.check_service(service_name, url):
                        self.failure_counts[service_name] = 0
                        logger.debug(f"‚úÖ {service_name}: OK")
                    else:
                        self.failure_counts[service_name] += 1
                        logger.warning(f"‚ùå {service_name}: FALHOU ({self.failure_counts[service_name]}/{self.max_failures})")
                        
                        if self.failure_counts[service_name] >= self.max_failures:
                            if self.restart_service(service_name):
                                self.failure_counts[service_name] = 0
                            time.sleep(30)  # Aguardar ap√≥s restart
                
                time.sleep(60)  # Verificar a cada minuto
                
            except KeyboardInterrupt:
                logger.info("üõë Auto Recovery Service parado")
                break
            except Exception as e:
                logger.error(f"‚ùå Erro no Auto Recovery: {e}")
                time.sleep(30)

if __name__ == "__main__":
    recovery = AutoRecovery()
    recovery.run()
'''
        
        # Salvar script
        script_path = Path('scripts/auto_recovery.py')
        with open(script_path, 'w') as f:
            f.write(recovery_script)
        
        script_path.chmod(0o755)
        
        print(f"‚úÖ Servi√ßo de recupera√ß√£o autom√°tica criado: {script_path}")
        self.debug_results['fixes_applied'].append("Servi√ßo auto_recovery.py criado")
    
    async def run_complete_debug(self):
        """Executar debug completo"""
        print("üîß INICIANDO DEBUG COMPLETO DO SISTEMA BGAPP")
        print("=" * 60)
        
        # Verifica√ß√µes
        self.check_ports()
        self.check_containers()
        await self.check_http_services()
        self.check_routing()
        
        # Corre√ß√µes
        self.fix_unhealthy_containers()
        self.create_healthcheck_script()
        self.create_auto_recovery_service()
        
        # Relat√≥rio final
        self.generate_debug_report()
    
    def generate_debug_report(self):
        """Gerar relat√≥rio de debug"""
        print("\nüìã RELAT√ìRIO DE DEBUG")
        print("=" * 40)
        
        # Contadores
        total_issues = len(self.debug_results['issues'])
        total_fixes = len(self.debug_results['fixes_applied'])
        
        print(f"üîç Problemas encontrados: {total_issues}")
        print(f"üîß Corre√ß√µes aplicadas: {total_fixes}")
        
        if self.debug_results['issues']:
            print("\n‚ùå PROBLEMAS IDENTIFICADOS:")
            for i, issue in enumerate(self.debug_results['issues'], 1):
                print(f"  {i}. {issue}")
        
        if self.debug_results['fixes_applied']:
            print("\n‚úÖ CORRE√á√ïES APLICADAS:")
            for i, fix in enumerate(self.debug_results['fixes_applied'], 1):
                print(f"  {i}. {fix}")
        
        # Salvar relat√≥rio
        report_path = Path('reports/debug_report.json')
        report_path.parent.mkdir(exist_ok=True)
        
        with open(report_path, 'w') as f:
            json.dump(self.debug_results, f, indent=2, default=str)
        
        print(f"\nüíæ Relat√≥rio salvo em: {report_path}")
        
        # Status final
        if total_issues == 0:
            print("\nüéâ SISTEMA TOTALMENTE SAUD√ÅVEL!")
        elif total_fixes >= total_issues:
            print("\n‚úÖ TODOS OS PROBLEMAS FORAM CORRIGIDOS!")
        else:
            print(f"\n‚ö†Ô∏è {total_issues - total_fixes} PROBLEMAS AINDA PRECISAM DE ATEN√á√ÉO")

async def main():
    """Fun√ß√£o principal"""
    debugger = BGAPPDebugger()
    await debugger.run_complete_debug()

if __name__ == "__main__":
    asyncio.run(main())
