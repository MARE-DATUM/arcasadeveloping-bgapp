#!/bin/bash

# 📚 BGAPP Documentation Organization Script (macOS Compatible)
# Automatically organizes .md files into categorized folders
# Author: BGAPP Team
# Version: 2.0 - macOS Compatible

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Configuration
DOCS_DIR="docs/organized"
LOG_FILE="docs/organization_log_$(date +%Y%m%d_%H%M%S).log"

# Functions
log() {
    echo -e "${2:-$NC}$1${NC}" | tee -a "$LOG_FILE"
}

print_header() {
    echo -e "${CYAN}"
    echo "╔══════════════════════════════════════════════════════════════╗"
    echo "║                 📚 BGAPP DOCS ORGANIZER 2.0                  ║"
    echo "║              Automated Documentation Organization            ║"
    echo "╚══════════════════════════════════════════════════════════════╝"
    echo -e "${NC}"
}

categorize_file() {
    local file="$1"
    local filename=$(basename "$file" .md)
    local upper_filename=$(echo "$filename" | tr '[:lower:]' '[:upper:]')
    
    # Simple pattern matching for categories
    case "$upper_filename" in
        *ADMIN*) echo "admin" ;;
        *ML*|*MACHINE*) echo "ml" ;;
        *QGIS*) echo "qgis" ;;
        *DEPLOY*|*BATMAN*|*ROBIN*) echo "deploy" ;;
        *DEBUG*|*CORRECAO*|*FIX*) echo "debug" ;;
        *SECURITY*|*AUDITORIA*|*SEGURANCA*) echo "security" ;;
        *FRONTEND*|*HUB*|*INTERFACE*) echo "frontend" ;;
        *IMPLEMENTACAO*|*PLANO*|*FEATURE*) echo "features" ;;
        *RELATORIO*|*REPORT*) echo "reports" ;;
        *GUIA*|*GUIDE*) echo "guides" ;;
        *ARQUITETURA*) echo "architecture" ;;
        *) echo "misc" ;;
    esac
}

show_stats() {
    log "📈 Documentation Statistics:" "$PURPLE"
    
    if [[ ! -d "$DOCS_DIR" ]]; then
        log "   ⚠️  Organized docs directory not found" "$YELLOW"
        return
    fi
    
    local total_files=$(find "$DOCS_DIR" -name "*.md" | wc -l | tr -d ' ')
    log "   Total organized files: $total_files" "$CYAN"
    
    log "   Files by category:" "$CYAN"
    for dir in "$DOCS_DIR"/*; do
        if [[ -d "$dir" ]]; then
            local category=$(basename "$dir")
            local count=$(find "$dir" -name "*.md" 2>/dev/null | wc -l | tr -d ' ')
            if [[ $count -gt 0 ]]; then
                log "     $category: $count files" "$GREEN"
            fi
        fi
    done
}

create_summary_report() {
    log "📊 Creating summary report..." "$BLUE"
    
    local report_file="docs/ORGANIZATION_SUMMARY.md"
    
    cat > "$report_file" << EOF
# 📚 BGAPP Documentation Organization Summary

Generated on: $(date '+%Y-%m-%d %H:%M:%S')

## 📊 Statistics

- **Total organized files**: $(find "$DOCS_DIR" -name "*.md" 2>/dev/null | wc -l | tr -d ' ')
- **Categories created**: $(ls -d "$DOCS_DIR"/*/ 2>/dev/null | wc -l | tr -d ' ')

## 📁 Category Breakdown

EOF

    for dir in "$DOCS_DIR"/*; do
        if [[ -d "$dir" ]]; then
            local category=$(basename "$dir")
            local count=$(find "$dir" -name "*.md" 2>/dev/null | wc -l | tr -d ' ')
            if [[ $count -gt 0 ]]; then
                echo "### 📂 $category ($count files)" >> "$report_file"
                echo "" >> "$report_file"
                find "$dir" -name "*.md" -exec basename {} \; | sort | sed 's/^/- /' >> "$report_file"
                echo "" >> "$report_file"
            fi
        fi
    done
    
    cat >> "$report_file" << EOF

## 🎯 Next Steps

1. Review categorization accuracy
2. Update naming convention compliance
3. Create category-specific READMEs
4. Implement automated maintenance

---

*Generated by BGAPP Documentation Organizer*
EOF

    log "   ✓ Summary report created: $report_file" "$GREEN"
}

# Main execution
main() {
    local show_stats_only=false
    
    # Simple argument parsing
    if [[ "$1" == "--stats" ]]; then
        show_stats_only=true
    fi
    
    print_header
    
    if [[ "$show_stats_only" == "true" ]]; then
        show_stats
        exit 0
    fi
    
    # Default action: show stats and create summary
    show_stats
    create_summary_report
    
    log ""
    log "🎉 Documentation organization completed!" "$GREEN"
    log "📋 Log file: $LOG_FILE" "$CYAN"
}

# Run main function
main "$@"
