#!/usr/bin/env python3
"""
Script para iniciar demo das anima√ß√µes meteorol√≥gicas
Inicia API backend e abre o navegador automaticamente
"""

import subprocess
import time
import webbrowser
import sys
import os
import signal
import threading
from pathlib import Path

def start_api_server():
    """Iniciar servidor da API"""
    print("üöÄ Iniciando API backend (porta 5080)...")
    
    # Navegar para o diret√≥rio correto
    project_root = Path(__file__).parent.parent
    os.chdir(project_root)
    
    # Iniciar API
    api_process = subprocess.Popen([
        sys.executable, "-m", "src.bgapp.admin_api"
    ], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    
    return api_process

def start_frontend_server():
    """Iniciar servidor frontend"""
    print("üåê Iniciando servidor frontend (porta 8085)...")
    
    project_root = Path(__file__).parent.parent
    frontend_dir = project_root / "infra" / "frontend"
    
    if not frontend_dir.exists():
        print(f"‚ùå Diret√≥rio frontend n√£o encontrado: {frontend_dir}")
        return None
    
    os.chdir(frontend_dir)
    
    # Iniciar servidor HTTP
    frontend_process = subprocess.Popen([
        sys.executable, "-m", "http.server", "8085"
    ], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    
    return frontend_process

def wait_for_server(url, timeout=30):
    """Aguardar servidor estar dispon√≠vel"""
    import requests
    
    for i in range(timeout):
        try:
            response = requests.get(url, timeout=1)
            if response.status_code == 200:
                return True
        except:
            pass
        time.sleep(1)
        if i % 5 == 0:
            print(f"   Aguardando servidor... ({i}s)")
    
    return False

def test_endpoints():
    """Testar endpoints b√°sicos"""
    import requests
    
    print("\nüß™ Testando endpoints...")
    
    endpoints = [
        ("http://localhost:5080/health", "API Health"),
        ("http://localhost:5080/metocean/status", "Metocean Status"),
        ("http://localhost:8085/index.html", "Frontend")
    ]
    
    for url, name in endpoints:
        try:
            response = requests.get(url, timeout=5)
            if response.status_code == 200:
                print(f"   ‚úÖ {name}: OK")
            else:
                print(f"   ‚ö†Ô∏è {name}: HTTP {response.status_code}")
        except Exception as e:
            print(f"   ‚ùå {name}: {e}")

def show_instructions():
    """Mostrar instru√ß√µes de uso"""
    print("\n" + "="*60)
    print("üåä BGAPP - Demo de Anima√ß√µes Meteorol√≥gicas")
    print("="*60)
    print()
    print("üéØ Como usar:")
    print("   1. O navegador abrir√° automaticamente")
    print("   2. Clique em 'Correntes' para ver streamlines animadas")
    print("   3. Clique em 'Vento' para ver campos vetoriais")
    print("   4. Use 'SST', 'Salinidade', 'Clorofila' para dados escalares")
    print("   5. Use '‚ñ∂Ô∏è Animar' para iniciar anima√ß√£o temporal")
    print()
    print("üîó URLs:")
    print("   ‚Ä¢ Mapa: http://localhost:8085/index.html")
    print("   ‚Ä¢ API Status: http://localhost:5080/metocean/status")
    print("   ‚Ä¢ API Docs: http://localhost:5080/docs")
    print()
    print("‚èπÔ∏è Para parar: Pressione Ctrl+C")
    print("="*60)

def signal_handler(sig, frame):
    """Manipular sinal de interrup√ß√£o"""
    print("\n\nüõë Parando servi√ßos...")
    sys.exit(0)

def main():
    """Fun√ß√£o principal"""
    
    # Configurar manipulador de sinal
    signal.signal(signal.SIGINT, signal_handler)
    
    print("üåä BGAPP - Iniciando Demo Meteorol√≥gico")
    print("-" * 40)
    
    processes = []
    
    try:
        # Iniciar API
        api_process = start_api_server()
        processes.append(api_process)
        
        # Aguardar API estar dispon√≠vel
        if wait_for_server("http://localhost:5080/health"):
            print("   ‚úÖ API dispon√≠vel")
        else:
            print("   ‚ùå API n√£o respondeu a tempo")
            return
        
        # Iniciar frontend
        frontend_process = start_frontend_server()
        processes.append(frontend_process)
        
        # Aguardar frontend estar dispon√≠vel
        if wait_for_server("http://localhost:8085"):
            print("   ‚úÖ Frontend dispon√≠vel")
        else:
            print("   ‚ùå Frontend n√£o respondeu a tempo")
            return
        
        # Testar endpoints
        test_endpoints()
        
        # Mostrar instru√ß√µes
        show_instructions()
        
        # Abrir navegador
        print("\nüåê Abrindo navegador...")
        webbrowser.open("http://localhost:8085/index.html")
        
        # Manter servi√ßos rodando
        print("\n‚è≥ Servi√ßos rodando... (Ctrl+C para parar)")
        
        while True:
            time.sleep(1)
            
            # Verificar se processos ainda est√£o rodando
            for i, process in enumerate(processes):
                if process.poll() is not None:
                    print(f"‚ö†Ô∏è Processo {i} parou inesperadamente")
    
    except KeyboardInterrupt:
        print("\nüõë Interrompido pelo usu√°rio")
    
    except Exception as e:
        print(f"\n‚ùå Erro: {e}")
    
    finally:
        # Parar todos os processos
        print("üßπ Limpando processos...")
        for process in processes:
            try:
                process.terminate()
                process.wait(timeout=5)
            except:
                try:
                    process.kill()
                except:
                    pass
        
        print("‚úÖ Demo finalizado")

if __name__ == "__main__":
    main()
