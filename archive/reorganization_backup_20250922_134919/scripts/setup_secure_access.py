#!/usr/bin/env python3
"""
Script para configurar acesso remoto seguro ao painel administrativo BGAPP
Gera certificados SSL, configura autenticação e prepara ambiente seguro
"""

import os
import subprocess
import sys
import secrets
import hashlib
from pathlib import Path
from getpass import getpass

def generate_ssl_certificates():
    """Gera certificados SSL auto-assinados"""
    print("🔐 Gerando certificados SSL...")
    
    ssl_dir = Path("infra/nginx/ssl")
    ssl_dir.mkdir(parents=True, exist_ok=True)
    
    # Gerar chave privada
    subprocess.run([
        "openssl", "genrsa", "-out", str(ssl_dir / "key.pem"), "2048"
    ], check=True)
    
    # Gerar certificado auto-assinado
    subprocess.run([
        "openssl", "req", "-new", "-x509", "-key", str(ssl_dir / "key.pem"),
        "-out", str(ssl_dir / "cert.pem"), "-days", "365",
        "-subj", "/C=AO/ST=Luanda/L=Luanda/O=BGAPP/CN=bgapp.local"
    ], check=True)
    
    print("✅ Certificados SSL gerados em infra/nginx/ssl/")

def generate_htpasswd():
    """Gera ficheiro de autenticação HTTP Basic"""
    print("👤 Configurando autenticação...")
    
    username = input("Nome de utilizador para acesso remoto [admin]: ").strip() or "admin"
    password = getpass("Password para acesso remoto: ")
    
    if not password:
        print("❌ Password não pode estar vazia")
        return False
    
    # Gerar hash bcrypt da password
    import crypt
    salt = crypt.mksalt(crypt.METHOD_SHA512)
    password_hash = crypt.crypt(password, salt)
    
    # Criar ficheiro .htpasswd
    htpasswd_path = Path("infra/nginx/.htpasswd")
    htpasswd_path.parent.mkdir(parents=True, exist_ok=True)
    
    with open(htpasswd_path, 'w') as f:
        f.write(f"{username}:{password_hash}\n")
    
    print(f"✅ Autenticação configurada para utilizador: {username}")
    return True

def create_env_file():
    """Cria ficheiro .env com configurações seguras"""
    print("⚙️ Configurando variáveis de ambiente...")
    
    env_path = Path(".env.secure")
    
    # Gerar secrets aleatórios
    admin_secret = secrets.token_urlsafe(32)
    postgres_password = secrets.token_urlsafe(16)
    minio_password = secrets.token_urlsafe(16)
    
    # Perguntar IP do pai
    father_ip = input("IP do teu pai (deixa vazio se não souberes): ").strip()
    
    env_content = f"""# BGAPP Secure Environment Configuration
# Generated by setup_secure_access.py

# Database
POSTGRES_PASSWORD={postgres_password}

# MinIO
MINIO_ROOT_USER=bgapp_admin
MINIO_ROOT_PASSWORD={minio_password}

# Admin API
ADMIN_AUTH_SECRET={admin_secret}

# Security
ALLOWED_IPS=127.0.0.1{f',{father_ip}' if father_ip else ''}

# Keycloak
KEYCLOAK_ADMIN=admin
KEYCLOAK_ADMIN_PASSWORD={secrets.token_urlsafe(12)}

# Optional: Cloudflare Tunnel Token
# CLOUDFLARE_TUNNEL_TOKEN=your_tunnel_token_here

# Network Configuration
EXTERNAL_DOMAIN=bgapp.local
EXTERNAL_PORT=443
"""
    
    with open(env_path, 'w') as f:
        f.write(env_content)
    
    print(f"✅ Ficheiro de configuração criado: {env_path}")
    print("📝 IMPORTANTE: Guarda estas credenciais em local seguro!")
    print(f"   - PostgreSQL: postgres / {postgres_password}")
    print(f"   - MinIO: bgapp_admin / {minio_password}")
    print(f"   - Keycloak: admin / {secrets.token_urlsafe(12)}")

def setup_fail2ban():
    """Configura Fail2ban para protecção"""
    print("🛡️ Configurando Fail2ban...")
    
    fail2ban_dir = Path("infra/fail2ban")
    fail2ban_dir.mkdir(parents=True, exist_ok=True)
    
    # Configuração do Fail2ban
    jail_conf = """
[DEFAULT]
bantime = 3600
findtime = 600
maxretry = 5
backend = auto

[nginx-http-auth]
enabled = true
filter = nginx-http-auth
logpath = /var/log/nginx/error.log
maxretry = 3
bantime = 7200

[nginx-noscript]
enabled = true
filter = nginx-noscript
logpath = /var/log/nginx/access.log
maxretry = 6
bantime = 86400

[nginx-badbots]
enabled = true
filter = nginx-badbots
logpath = /var/log/nginx/access.log
maxretry = 2
bantime = 86400
"""
    
    with open(fail2ban_dir / "jail.local", 'w') as f:
        f.write(jail_conf)
    
    print("✅ Fail2ban configurado")

def create_startup_script():
    """Cria script para iniciar ambiente seguro"""
    script_content = """#!/bin/bash
# Script para iniciar BGAPP com acesso remoto seguro

set -e

echo "🚀 Iniciando BGAPP com acesso remoto seguro..."

# Verificar se o .env.secure existe
if [ ! -f .env.secure ]; then
    echo "❌ Ficheiro .env.secure não encontrado!"
    echo "   Execute: python scripts/setup_secure_access.py"
    exit 1
fi

# Copiar configurações
cp .env.secure .env

# Parar serviços existentes
echo "🛑 Parando serviços existentes..."
docker compose -f infra/docker-compose.yml down 2>/dev/null || true
docker compose -f infra/docker-compose.secure.yml down 2>/dev/null || true

# Iniciar serviços seguros
echo "🔐 Iniciando serviços seguros..."
docker compose -f infra/docker-compose.secure.yml up -d --build

# Aguardar serviços ficarem prontos
echo "⏳ Aguardando serviços..."
sleep 15

# Verificar estado
echo "🔍 Verificando estado dos serviços..."
docker compose -f infra/docker-compose.secure.yml ps

echo ""
echo "🎉 BGAPP iniciado com acesso remoto seguro!"
echo ""
echo "📋 URLs de acesso:"
echo "   🔐 HTTPS (seguro): https://localhost/admin.html"
echo "   🌐 HTTP (redirect): http://localhost (→ HTTPS)"
echo ""
echo "🔑 Credenciais:"
echo "   📖 Ver ficheiro .env.secure para passwords"
echo "   🔐 Autenticação HTTP Basic configurada"
echo ""
echo "⚠️  IMPORTANTE:"
echo "   - Partilha apenas o URL HTTPS"
echo "   - Fornece as credenciais HTTP Basic ao teu pai"
echo "   - Considera usar Cloudflare Tunnel para máxima segurança"
echo ""
echo "🔧 Para parar:"
echo "   docker compose -f infra/docker-compose.secure.yml down"
"""
    
    script_path = Path("scripts/start_secure.sh")
    with open(script_path, 'w') as f:
        f.write(script_content)
    
    # Tornar executável
    os.chmod(script_path, 0o755)
    print(f"✅ Script de inicialização criado: {script_path}")

def setup_cloudflare_tunnel():
    """Guia para configurar Cloudflare Tunnel (opcional)"""
    print("\n🌐 OPÇÃO AVANÇADA: Cloudflare Tunnel")
    print("=" * 50)
    print("Para máxima segurança, podes usar Cloudflare Tunnel:")
    print("")
    print("1. Criar conta em https://dash.cloudflare.com")
    print("2. Ir para Zero Trust > Access > Tunnels")
    print("3. Criar novo tunnel")
    print("4. Copiar o token e adicionar ao .env.secure:")
    print("   CLOUDFLARE_TUNNEL_TOKEN=seu_token_aqui")
    print("5. Iniciar com perfil cloudflare:")
    print("   docker compose -f infra/docker-compose.secure.yml --profile cloudflare up -d")
    print("")
    print("Vantagens:")
    print("✅ Sem necessidade de abrir portas no router")
    print("✅ URL público seguro (bgapp-xyz.trycloudflare.com)")
    print("✅ Proteção DDoS automática")
    print("✅ Zero configuração de rede")

def main():
    """Função principal"""
    print("🔐 BGAPP - Configuração de Acesso Remoto Seguro")
    print("=" * 60)
    print("Este script configura acesso seguro ao painel administrativo")
    print("para partilhar com o teu pai sem tornar a app pública.")
    print("")
    
    if not Path("infra/docker-compose.yml").exists():
        print("❌ Erro: Execute este script a partir do diretório raiz do projeto")
        sys.exit(1)
    
    try:
        # 1. Gerar certificados SSL
        generate_ssl_certificates()
        
        # 2. Configurar autenticação
        if not generate_htpasswd():
            sys.exit(1)
        
        # 3. Criar ficheiro .env seguro
        create_env_file()
        
        # 4. Configurar Fail2ban
        setup_fail2ban()
        
        # 5. Criar script de inicialização
        create_startup_script()
        
        print("\n" + "=" * 60)
        print("🎉 CONFIGURAÇÃO SEGURA COMPLETA!")
        print("")
        print("📋 Próximos passos:")
        print("1. Executar: bash scripts/start_secure.sh")
        print("2. Aceder: https://localhost/admin.html")
        print("3. Partilhar URL e credenciais com o teu pai")
        print("")
        print("🔒 Funcionalidades de segurança ativas:")
        print("   ✅ HTTPS obrigatório (SSL)")
        print("   ✅ Autenticação HTTP Basic")
        print("   ✅ Rate limiting")
        print("   ✅ Headers de segurança")
        print("   ✅ Fail2ban (proteção contra ataques)")
        print("   ✅ Serviços internos protegidos")
        print("")
        print("💡 Para máxima segurança, considera Cloudflare Tunnel")
        
        # Mostrar guia do Cloudflare Tunnel
        setup_cloudflare_tunnel()
        
    except subprocess.CalledProcessError as e:
        print(f"❌ Erro ao executar comando: {e}")
        sys.exit(1)
    except Exception as e:
        print(f"❌ Erro: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
