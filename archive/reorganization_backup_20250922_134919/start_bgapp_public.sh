#!/bin/bash

# Script para disponibilizar BGAPP via ngrok
# ‚ö†Ô∏è ATEN√á√ÉO: Este script exp√µe a aplica√ß√£o publicamente na internet
# üîí Use apenas em ambiente de desenvolvimento e com cuidado

# Verificar se o acesso remoto est√° explicitamente habilitado
if [ "$ENABLE_REMOTE_ACCESS" != "true" ]; then
    echo "‚ùå ACESSO REMOTO DESABILITADO POR SEGURAN√áA"
    echo "============================================"
    echo "üîí Este script exp√µe a aplica√ß√£o publicamente na internet."
    echo "‚ö†Ô∏è  Para habilitar, defina: ENABLE_REMOTE_ACCESS=true"
    echo ""
    echo "üí° Para uso local seguro, use:"
    echo "   ./start_bgapp_enhanced.sh  # Apenas localhost"
    echo ""
    exit 1
fi

echo "‚ö†Ô∏è  BGAPP - Exposi√ß√£o remota HABILITADA"
echo "============================================"
echo "üîì A aplica√ß√£o ser√° acess√≠vel publicamente!"
echo "üîí Certifique-se que est√° em ambiente de desenvolvimento"

# Verificar se estamos no diret√≥rio correto
if [ ! -f "infra/frontend/index.html" ]; then
    echo "‚ùå Erro: Execute este script a partir do diret√≥rio raiz do projeto BGAPP"
    echo "üí° Certifique-se que o arquivo infra/frontend/index.html existe"
    exit 1
fi

# Verificar se ngrok est√° instalado
if ! command -v ngrok &> /dev/null; then
    echo "‚ùå ngrok n√£o est√° instalado"
    echo "üí° Instale o ngrok:"
    echo "   - macOS: brew install ngrok/ngrok/ngrok"
    echo "   - Windows/Linux: @https://ngrok.com/download"
    echo "   - Ou baixe de: https://ngrok.com/download"
    exit 1
fi

echo "‚úÖ ngrok encontrado"

# Definir porta
PORT=8080

# Parar processos existentes
echo "üßπ Limpando processos anteriores..."
pkill -f "python.*http.server.*$PORT" 2>/dev/null || true
pkill -f "ngrok.*http.*$PORT" 2>/dev/null || true

# Iniciar servidor HTTP personalizado em background (do diret√≥rio raiz)
echo "üåê Iniciando servidor web personalizado na porta $PORT..."
echo "üéØ P√°gina principal for√ßada: index.html"
python3 server_index.py $PORT > /dev/null 2>&1 &
SERVER_PID=$!

# Aguardar servidor iniciar
sleep 3

# Verificar se servidor est√° funcionando
if curl -s http://localhost:$PORT > /dev/null; then
    echo "‚úÖ Servidor web iniciado com sucesso"
else
    echo "‚ùå Erro ao iniciar servidor web"
    kill $SERVER_PID 2>/dev/null
    exit 1
fi

# Iniciar ngrok em background
echo "üöÄ Iniciando t√∫nel ngrok..."
ngrok http $PORT --log=stdout > /tmp/ngrok.log 2>&1 &
NGROK_PID=$!

# Aguardar ngrok inicializar
echo "‚è≥ Aguardando t√∫nel ngrok ficar pronto..."
sleep 5

# Fun√ß√£o para obter URL do ngrok
get_ngrok_url() {
    if command -v curl &> /dev/null; then
        URL=$(curl -s http://localhost:4040/api/tunnels 2>/dev/null | python3 -c "
import json, sys
try:
    data = json.load(sys.stdin)
    if data.get('tunnels'):
        print(data['tunnels'][0]['public_url'])
    else:
        print('')
except:
    print('')
" 2>/dev/null)
        echo "$URL"
    else
        echo ""
    fi
}

# Obter URL p√∫blica
PUBLIC_URL=$(get_ngrok_url)

# Mostrar informa√ß√µes
echo ""
echo "üéâ BGAPP DISPON√çVEL REMOTAMENTE!"
echo "================================"

if [ -n "$PUBLIC_URL" ] && [ "$PUBLIC_URL" != "" ]; then
    echo "üîó URL p√∫blica: $PUBLIC_URL"
    echo "üì± Acesso √† aplica√ß√£o: $PUBLIC_URL"
else
    echo "üîó Verifique a URL em: http://localhost:4040"
    echo "   (Dashboard do ngrok)"
fi

echo "üíª Acesso local: http://localhost:$PORT"
echo "üîß Dashboard ngrok: http://localhost:4040"
echo ""
echo "üìã Funcionalidades dispon√≠veis:"
echo "   ‚úÖ Mapa meteorol√≥gico interativo de Angola"
echo "   ‚úÖ Dados oceanogr√°ficos (SST, Salinidade, Clorofila)"
echo "   ‚úÖ Campos vetoriais (Correntes, Vento)"
echo "   ‚úÖ Controles de anima√ß√£o temporal"
echo "   ‚úÖ ZEE de Angola e Cabinda"
echo "   ‚úÖ Painel administrativo (‚öôÔ∏è no canto superior direito)"
echo ""
echo "üîê Acesso administrativo:"
echo "   - Clicar no ‚öôÔ∏è no painel"
echo "   - Credenciais: Consulte a documenta√ß√£o de seguran√ßa"
echo ""
echo "üåç A aplica√ß√£o est√° agora acess√≠vel globalmente!"
echo "   Partilhe a URL p√∫blica com qualquer pessoa"
echo ""
echo "üõë Para parar: Ctrl+C"
echo "================================"

# Fun√ß√£o para limpeza ao sair
cleanup() {
    echo ""
    echo "üõë Parando servi√ßos..."
    kill $SERVER_PID 2>/dev/null || true
    kill $NGROK_PID 2>/dev/null || true
    pkill -f "python.*http.server.*$PORT" 2>/dev/null || true
    pkill -f "ngrok.*http.*$PORT" 2>/dev/null || true
    echo "‚úÖ Servi√ßos parados!"
    exit 0
}

# Capturar sinais para limpeza
trap cleanup SIGINT SIGTERM

# Manter script rodando
echo "üëÄ Monitorando servi√ßos... (Ctrl+C para parar)"
while true; do
    sleep 5
    
    # Verificar se servidor ainda est√° rodando
    if ! kill -0 $SERVER_PID 2>/dev/null; then
        echo "‚ö†Ô∏è Servidor web parou inesperadamente"
        break
    fi
    
    # Verificar se ngrok ainda est√° rodando
    if ! kill -0 $NGROK_PID 2>/dev/null; then
        echo "‚ö†Ô∏è T√∫nel ngrok parou inesperadamente"
        break
    fi
    
    # Mostrar URL periodicamente (a cada 30 segundos)
    if [ $((SECONDS % 30)) -eq 0 ]; then
        CURRENT_URL=$(get_ngrok_url)
        if [ -n "$CURRENT_URL" ] && [ "$CURRENT_URL" != "" ]; then
            echo "üîó URL atual: $CURRENT_URL"
        fi
    fi
done

# Se chegou aqui, algum servi√ßo parou
cleanup
