// Script para testar a fun√ß√£o loadAPI() diretamente
console.log('üß™ Iniciando teste da fun√ß√£o loadAPI...');

// Aguardar um pouco para garantir que a p√°gina carregou
setTimeout(() => {
    console.log('üß™ Verificando se SectionLoader existe...');
    
    if (typeof window.SectionLoader !== 'undefined') {
        console.log('‚úÖ SectionLoader encontrado!');
        console.log('üìã M√©todos dispon√≠veis:', Object.keys(window.SectionLoader));
        
        // Verificar se loadAPI existe
        if (typeof window.SectionLoader.loadAPI === 'function') {
            console.log('‚úÖ loadAPI √© uma fun√ß√£o!');
            
            // Executar a fun√ß√£o
            console.log('üöÄ Executando loadAPI()...');
            window.SectionLoader.loadAPI().then(() => {
                console.log('‚úÖ loadAPI() executada com sucesso!');
            }).catch(error => {
                console.error('‚ùå Erro ao executar loadAPI():', error);
            });
            
        } else {
            console.error('‚ùå loadAPI n√£o √© uma fun√ß√£o');
        }
        
    } else {
        console.error('‚ùå SectionLoader n√£o encontrado');
        console.log('üîç Vari√°veis globais dispon√≠veis:', Object.keys(window).filter(k => k.includes('Section') || k.includes('API') || k.includes('Config')));
    }
    
}, 2000);

// Verificar se CONFIG existe
if (typeof window.CONFIG !== 'undefined') {
    console.log('‚úÖ CONFIG encontrado:', window.CONFIG);
} else {
    console.error('‚ùå CONFIG n√£o encontrado');
}
