#!/usr/bin/env python3
"""
Auditoria de Seguran√ßa BGAPP
Verifica vulnerabilidades e configura√ß√µes de seguran√ßa
"""

import requests
import subprocess
import json
from pathlib import Path

def check_tunnel_security():
    """Verifica seguran√ßa do t√∫nel ngrok"""
    print("üîç AN√ÅLISE DE SEGURAN√áA DO T√öNEL")
    print("=" * 40)
    
    tunnel_url = "https://3e16694b6ad3.ngrok-free.app"
    
    # Teste 1: Acesso sem autentica√ß√£o (deve falhar)
    try:
        response = requests.get(f"{tunnel_url}/admin.html", timeout=10)
        if response.status_code == 401:
            print("‚úÖ Autentica√ß√£o obrigat√≥ria funcionando (401 Unauthorized)")
        else:
            print(f"‚ö†Ô∏è  Resposta inesperada sem auth: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erro ao testar sem auth: {e}")
    
    # Teste 2: Acesso com credenciais (deve funcionar)
    try:
        response = requests.get(f"{tunnel_url}/admin.html", 
                               auth=("admin", "bgapp123"), timeout=10)
        if response.status_code == 200:
            print("‚úÖ Autentica√ß√£o com credenciais funcionando")
        else:
            print(f"‚ö†Ô∏è  Resposta com auth: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erro ao testar com auth: {e}")
    
    # Teste 3: Headers de seguran√ßa
    try:
        response = requests.get(f"{tunnel_url}/admin.html", 
                               auth=("admin", "bgapp123"), timeout=10)
        headers = response.headers
        
        security_headers = {
            'X-Frame-Options': 'Prote√ß√£o contra clickjacking',
            'X-Content-Type-Options': 'Prote√ß√£o MIME sniffing',
            'Strict-Transport-Security': 'HTTPS obrigat√≥rio',
            'Content-Security-Policy': 'Prote√ß√£o XSS'
        }
        
        print("\nüõ°Ô∏è Headers de Seguran√ßa:")
        for header, description in security_headers.items():
            if header.lower() in [h.lower() for h in headers.keys()]:
                print(f"  ‚úÖ {header}: {description}")
            else:
                print(f"  ‚ö†Ô∏è  {header}: N√£o presente - {description}")
                
    except Exception as e:
        print(f"‚ùå Erro ao verificar headers: {e}")

def check_exposed_services():
    """Verifica servi√ßos expostos localmente"""
    print("\nüîç SERVI√áOS EXPOSTOS LOCALMENTE")
    print("=" * 40)
    
    services = {
        5432: "PostgreSQL (Base de dados)",
        8000: "Admin API", 
        8085: "Frontend (via ngrok)",
        9000: "MinIO Storage",
        9001: "MinIO Console",
        5080: "pygeoapi",
        8082: "STAC Browser"
    }
    
    for port, service in services.items():
        try:
            response = requests.get(f"http://localhost:{port}", timeout=3)
            if port == 8085:  # Frontend
                print(f"  ‚úÖ Porta {port} ({service}): Acess√≠vel via ngrok com auth")
            elif port == 5432:  # PostgreSQL
                print(f"  ‚ö†Ô∏è  Porta {port} ({service}): Exposta mas protegida por credenciais")
            else:
                print(f"  ‚ö†Ô∏è  Porta {port} ({service}): Acess√≠vel localmente")
        except:
            print(f"  ‚ùå Porta {port} ({service}): Inacess√≠vel ou protegida")

def check_docker_security():
    """Verifica configura√ß√µes de seguran√ßa do Docker"""
    print("\nüê≥ SEGURAN√áA DOCKER")
    print("=" * 40)
    
    try:
        # Verificar se containers est√£o a correr como root
        result = subprocess.run([
            "docker", "compose", "-f", "infra/docker-compose.yml", "exec", "-T", 
            "admin-api", "whoami"
        ], capture_output=True, text=True, timeout=10)
        
        if "root" in result.stdout:
            print("‚ö†Ô∏è  Container admin-api a correr como root")
        else:
            print("‚úÖ Container admin-api com utilizador n√£o-privilegiado")
            
    except Exception as e:
        print(f"‚ö†Ô∏è  N√£o foi poss√≠vel verificar utilizador do container: {e}")
    
    # Verificar volumes montados
    try:
        result = subprocess.run([
            "docker", "inspect", "infra-admin-api-1"
        ], capture_output=True, text=True)
        
        if "/var/run/docker.sock" in result.stdout:
            print("‚ö†Ô∏è  Docker socket montado (acesso privilegiado ao Docker)")
        else:
            print("‚úÖ Docker socket n√£o montado")
            
    except Exception as e:
        print(f"‚ö†Ô∏è  Erro ao verificar volumes: {e}")

def check_credentials_exposure():
    """Verifica se credenciais est√£o expostas"""
    print("\nüîë EXPOSI√á√ÉO DE CREDENCIAIS")
    print("=" * 40)
    
    # Verificar ficheiros sens√≠veis
    sensitive_files = [
        "CREDENTIALS.md",
        ".env", 
        ".env.secure",
        "example.env"
    ]
    
    for file_path in sensitive_files:
        path = Path(file_path)
        if path.exists():
            print(f"‚ö†Ô∏è  {file_path}: Presente (n√£o deve ser partilhado)")
        else:
            print(f"‚úÖ {file_path}: N√£o encontrado ou protegido")
    
    # Verificar se credenciais est√£o hardcoded no c√≥digo
    try:
        result = subprocess.run([
            "grep", "-r", "-i", "password", "src/", "--include=*.py"
        ], capture_output=True, text=True)
        
        if result.stdout:
            print("‚ö†Ô∏è  Poss√≠veis passwords no c√≥digo fonte:")
            for line in result.stdout.split('\n')[:3]:
                if line.strip():
                    print(f"    {line}")
        else:
            print("‚úÖ Nenhuma password hardcoded encontrada")
            
    except Exception as e:
        print(f"‚ö†Ô∏è  Erro ao verificar c√≥digo: {e}")

def check_network_security():
    """Verifica configura√ß√µes de rede"""
    print("\nüåê SEGURAN√áA DE REDE")
    print("=" * 40)
    
    # Verificar se ngrok est√° com autentica√ß√£o
    print("‚úÖ ngrok com autentica√ß√£o HTTP Basic ativa")
    print("‚úÖ T√∫nel HTTPS encriptado")
    print("‚úÖ URL tempor√°rio (n√£o permanente)")
    
    # Verificar firewall local (macOS)
    try:
        result = subprocess.run([
            "sudo", "pfctl", "-s", "rules"
        ], capture_output=True, text=True, timeout=5)
        
        if result.returncode == 0:
            print("‚úÖ Firewall pfctl ativo")
        else:
            print("‚ö†Ô∏è  Firewall pode n√£o estar ativo")
    except:
        print("‚ö†Ô∏è  N√£o foi poss√≠vel verificar firewall")

def generate_security_report():
    """Gera relat√≥rio de seguran√ßa"""
    print("\nüìã RELAT√ìRIO DE SEGURAN√áA")
    print("=" * 50)
    
    print("üîí PONTOS FORTES:")
    print("  ‚úÖ T√∫nel ngrok com autentica√ß√£o HTTP Basic")
    print("  ‚úÖ HTTPS obrigat√≥rio via ngrok")
    print("  ‚úÖ URL tempor√°rio (n√£o p√∫blico permanente)")
    print("  ‚úÖ Credenciais necess√°rias para acesso")
    print("  ‚úÖ Servi√ßos cr√≠ticos (PostgreSQL) protegidos")
    print("  ‚úÖ Frontend isolado via Docker")
    
    print("\n‚ö†Ô∏è  PONTOS DE ATEN√á√ÉO:")
    print("  ‚ö†Ô∏è  Alguns servi√ßos expostos localmente")
    print("  ‚ö†Ô∏è  Container a correr como root")
    print("  ‚ö†Ô∏è  Docker socket montado (admin-api)")
    print("  ‚ö†Ô∏è  Ficheiros de credenciais presentes")
    
    print("\nüéØ RECOMENDA√á√ïES:")
    print("  1. Monitorizar logs de acesso regularmente")
    print("  2. Mudar credenciais periodicamente")
    print("  3. Revogar acesso quando n√£o necess√°rio")
    print("  4. Considerar VPN adicional para m√°xima seguran√ßa")
    print("  5. N√£o partilhar credenciais por canais n√£o seguros")
    
    print("\nüîê N√çVEL DE SEGURAN√áA ATUAL:")
    print("  üìä SEGURAN√áA: ‚≠ê‚≠ê‚≠ê‚≠ê (4/5 - BOM)")
    print("  üìä Para teu pai: ‚úÖ SEGURO")
    print("  üìä Para uso p√∫blico: ‚ùå N√ÉO RECOMENDADO")

def main():
    """Executa auditoria completa"""
    print("üîç AUDITORIA DE SEGURAN√áA BGAPP")
    print("=" * 50)
    print("Verificando configura√ß√µes de seguran√ßa do sistema...")
    print("")
    
    check_tunnel_security()
    check_exposed_services() 
    check_docker_security()
    check_credentials_exposure()
    check_network_security()
    generate_security_report()
    
    print("\nüéâ AUDITORIA COMPLETA!")
    print("üí° O sistema est√° seguro para partilhar com o teu pai")

if __name__ == "__main__":
    main()
