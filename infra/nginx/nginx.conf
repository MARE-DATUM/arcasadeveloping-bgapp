# Nginx configuration for secure remote access to BGAPP Admin Panel

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Security headers
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    add_header Referrer-Policy strict-origin-when-cross-origin;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    
    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;
    
    # Rate limiting - Configuração mais permissiva para desenvolvimento
    limit_req_zone $binary_remote_addr zone=login:10m rate=60r/m;
    limit_req_zone $binary_remote_addr zone=api:10m rate=300r/m;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
    
    # SSL configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    
    # HTTP server for development/ngrok
    server {
        listen 80;
        server_name _;
        
        # Comment out auth for development - uncomment for production
        # auth_basic "BGAPP Admin - Acesso Restrito";
        # auth_basic_user_file /etc/nginx/.htpasswd;
        
        # Main application (BGAPP map interface)
        location / {
            root /usr/share/nginx/html;
            index index.html;
            try_files $uri $uri/ /index.html;
            
            # Rate limiting mais permissivo para desenvolvimento
            limit_req zone=login burst=50 nodelay;
            
            # Cache static assets (except JS/CSS for development)
            location ~* \.(png|jpg|jpeg|gif|ico|svg)$ {
                expires 1y;
                add_header Cache-Control "public, immutable";
            }
            
            # No cache for JS/CSS during development
            location ~* \.(css|js)$ {
                add_header Cache-Control "no-cache, no-store, must-revalidate";
                add_header Pragma "no-cache";
                add_header Expires "0";
            }
        }
        
        # Admin API proxy
        location /admin-api/ {
            limit_req zone=api burst=100 nodelay;
            
            # CORS headers restritivos - apenas origens locais
            add_header Access-Control-Allow-Origin "http://localhost:8085" always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Authorization, Content-Type, Accept, X-Requested-With" always;
            add_header Access-Control-Allow-Credentials "true" always;
            
            # Handle preflight requests
            if ($request_method = OPTIONS) {
                add_header Access-Control-Allow-Origin "http://localhost:8085";
                add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
                add_header Access-Control-Allow-Headers "Authorization, Content-Type, Accept, X-Requested-With";
                add_header Access-Control-Max-Age 86400;
                return 204;
            }
            
            proxy_pass http://admin-api:8000/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket support
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            
            # Timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }
        
        # pygeoapi proxy
        location /api/ {
            limit_req zone=api burst=50 nodelay;
            
            # CORS headers for ngrok access
            add_header Access-Control-Allow-Origin "*" always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Authorization, Content-Type, Accept, X-Requested-With" always;
            
            # Handle preflight requests
            if ($request_method = OPTIONS) {
                add_header Access-Control-Allow-Origin "*";
                add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
                add_header Access-Control-Allow-Headers "Authorization, Content-Type, Accept, X-Requested-With";
                add_header Access-Control-Max-Age 86400;
                return 204;
            }
            
            proxy_pass http://pygeoapi:80/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # STAC API proxy
        location /stac/ {
            limit_req zone=api burst=30 nodelay;
            
            proxy_pass http://stac:8081/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # STAC Browser proxy
        location /browser/ {
            proxy_pass http://stac-browser:8080/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # MinIO Console proxy (admin only)
        location /minio/ {
            # Extra security for MinIO access
            limit_req zone=login burst=5 nodelay;
            
            proxy_pass http://minio:9001/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket support for MinIO console
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }
        
        # Health check endpoint (no auth required)
        location /health {
            auth_basic off;
            access_log off;
            return 200 'OK';
            add_header Content-Type text/plain;
        }
        
        # Block access to sensitive files
        location ~ /\.(env|git|htaccess|htpasswd) {
            deny all;
            return 404;
        }
        
        # Block access to internal paths
        location ~ ^/(docker-compose|scripts|src|configs)/ {
            deny all;
            return 404;
        }
    }
}

# Stream block for TCP/UDP proxying (if needed)
stream {
    # PostgreSQL proxy with IP restriction (optional)
    upstream postgres_backend {
        server postgis:5432;
    }
    
    server {
        listen 5433;  # External PostgreSQL port
        proxy_pass postgres_backend;
        proxy_timeout 1s;
        proxy_responses 1;
        # Add IP restrictions here if needed
    }
}
