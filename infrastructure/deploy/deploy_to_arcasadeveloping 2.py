#!/usr/bin/env python3
"""
Script de Deploy BGAPP para arcasadeveloping.org
Configura deploy completo com index.html como p√°gina principal
"""

import os
import shutil
import json
import subprocess
import sys
from pathlib import Path
from datetime import datetime

class BGAPPDeployManager:
    def __init__(self):
        self.project_root = Path.cwd()
        self.frontend_dir = self.project_root / "infra" / "frontend"
        self.deploy_dir = self.project_root / "deploy_arcasadeveloping"
        self.domain = "arcasadeveloping.org"
        
    def log(self, message, level="INFO"):
        """Log com timestamp"""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        prefix = {
            "INFO": "‚úÖ",
            "WARN": "‚ö†Ô∏è",
            "ERROR": "‚ùå",
            "SUCCESS": "üéâ"
        }.get(level, "‚ÑπÔ∏è")
        print(f"{prefix} [{timestamp}] {message}")
    
    def verify_project_structure(self):
        """Verificar se a estrutura do projeto est√° correta"""
        self.log("Verificando estrutura do projeto...")
        
        required_files = [
            self.frontend_dir / "index.html",
            self.frontend_dir / "assets",
            self.frontend_dir / "manifest.json",
            self.frontend_dir / "favicon.ico"
        ]
        
        missing_files = []
        for file_path in required_files:
            if not file_path.exists():
                missing_files.append(str(file_path))
        
        if missing_files:
            self.log(f"Arquivos necess√°rios n√£o encontrados: {missing_files}", "ERROR")
            return False
            
        self.log("Estrutura do projeto verificada com sucesso")
        return True
    
    def create_deploy_directory(self):
        """Criar diret√≥rio de deploy limpo"""
        self.log("Criando diret√≥rio de deploy...")
        
        if self.deploy_dir.exists():
            shutil.rmtree(self.deploy_dir)
        
        self.deploy_dir.mkdir(parents=True, exist_ok=True)
        self.log(f"Diret√≥rio de deploy criado: {self.deploy_dir}")
    
    def copy_frontend_files(self):
        """Copiar todos os arquivos do frontend necess√°rios"""
        self.log("Copiando arquivos do frontend...")
        
        # Copiar index.html como arquivo principal
        shutil.copy2(self.frontend_dir / "index.html", self.deploy_dir / "index.html")
        self.log("index.html copiado como p√°gina principal")
        
        # Copiar diret√≥rio assets completo
        if (self.frontend_dir / "assets").exists():
            shutil.copytree(
                self.frontend_dir / "assets",
                self.deploy_dir / "assets",
                dirs_exist_ok=True
            )
            self.log("Diret√≥rio assets copiado")
        
        # Copiar arquivos de configura√ß√£o PWA
        pwa_files = [
            "manifest.json",
            "sw.js",
            "favicon.ico",
            "apple-touch-icon.png"
        ]
        
        for file_name in pwa_files:
            source = self.frontend_dir / file_name
            if source.exists():
                shutil.copy2(source, self.deploy_dir / file_name)
                self.log(f"Arquivo PWA copiado: {file_name}")
        
        # Copiar √≠cones
        for icon_file in self.frontend_dir.glob("*icon*.png"):
            shutil.copy2(icon_file, self.deploy_dir / icon_file.name)
        
        for favicon_file in self.frontend_dir.glob("favicon-*.png"):
            shutil.copy2(favicon_file, self.deploy_dir / favicon_file.name)
    
    def create_htaccess(self):
        """Criar arquivo .htaccess para configura√ß√£o do servidor"""
        htaccess_content = """# BGAPP - Configura√ß√£o para arcasadeveloping.org

# P√°gina principal
DirectoryIndex index.html

# Configura√ß√µes de seguran√ßa
Header always set X-Frame-Options "SAMEORIGIN"
Header always set X-Content-Type-Options "nosniff"
Header always set X-XSS-Protection "1; mode=block"
Header always set Referrer-Policy "strict-origin-when-cross-origin"

# Configura√ß√µes de cache
<IfModule mod_expires.c>
    ExpiresActive On
    
    # Cache para assets est√°ticos (1 ano)
    ExpiresByType text/css "access plus 1 year"
    ExpiresByType application/javascript "access plus 1 year"
    ExpiresByType image/png "access plus 1 year"
    ExpiresByType image/jpg "access plus 1 year"
    ExpiresByType image/jpeg "access plus 1 year"
    ExpiresByType image/gif "access plus 1 year"
    ExpiresByType image/svg+xml "access plus 1 year"
    ExpiresByType image/x-icon "access plus 1 year"
    
    # Cache curto para HTML (1 hora)
    ExpiresByType text/html "access plus 1 hour"
    
    # Cache para manifests e service workers (1 dia)
    ExpiresByType application/manifest+json "access plus 1 day"
    ExpiresByType application/x-web-app-manifest+json "access plus 1 day"
</IfModule>

# Compress√£o GZIP
<IfModule mod_deflate.c>
    AddOutputFilterByType DEFLATE text/plain
    AddOutputFilterByType DEFLATE text/html
    AddOutputFilterByType DEFLATE text/xml
    AddOutputFilterByType DEFLATE text/css
    AddOutputFilterByType DEFLATE application/xml
    AddOutputFilterByType DEFLATE application/xhtml+xml
    AddOutputFilterByType DEFLATE application/rss+xml
    AddOutputFilterByType DEFLATE application/javascript
    AddOutputFilterByType DEFLATE application/x-javascript
    AddOutputFilterByType DEFLATE application/json
</IfModule>

# Configura√ß√µes CORS para APIs externas
<IfModule mod_headers.c>
    # Permitir CORS para recursos necess√°rios
    Header set Access-Control-Allow-Origin "*"
    Header set Access-Control-Allow-Methods "GET, POST, OPTIONS"
    Header set Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept"
</IfModule>

# Redirecionamento para HTTPS (recomendado)
RewriteEngine On
RewriteCond %{HTTPS} off
RewriteRule ^(.*)$ https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301]

# Configura√ß√µes para PWA
<Files "manifest.json">
    Header set Content-Type "application/manifest+json"
</Files>

<Files "sw.js">
    Header set Content-Type "application/javascript"
    Header set Cache-Control "no-cache, no-store, must-revalidate"
</Files>

# Bloquear acesso a arquivos sens√≠veis
<FilesMatch "\\.(env|log|config)$">
    Order allow,deny
    Deny from all
</FilesMatch>
"""
        
        htaccess_path = self.deploy_dir / ".htaccess"
        with open(htaccess_path, 'w', encoding='utf-8') as f:
            f.write(htaccess_content)
        
        self.log("Arquivo .htaccess criado com configura√ß√µes de produ√ß√£o")
    
    def update_production_config(self):
        """Atualizar configura√ß√µes para produ√ß√£o"""
        self.log("Atualizando configura√ß√µes para produ√ß√£o...")
        
        index_path = self.deploy_dir / "index.html"
        
        # Ler o arquivo index.html
        with open(index_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Substituir localhost por URLs de produ√ß√£o
        content = content.replace(
            "location.hostname === 'localhost' ? 'http://localhost:5080' : '/api'",
            f"'https://{self.domain}/api'"
        )
        
        # Atualizar t√≠tulo para produ√ß√£o
        content = content.replace(
            "<title>BGAPP - Mapa Meteorol√≥gico Interativo</title>",
            f"<title>BGAPP - Mapa Meteorol√≥gico Interativo | {self.domain}</title>"
        )
        
        # Adicionar meta tag de dom√≠nio
        content = content.replace(
            '<meta name="author" content="BGAPP Development Team">',
            f'<meta name="author" content="BGAPP Development Team">\n  <meta name="domain" content="{self.domain}">'
        )
        
        # Escrever arquivo atualizado
        with open(index_path, 'w', encoding='utf-8') as f:
            f.write(content)
        
        self.log("Configura√ß√µes de produ√ß√£o aplicadas")
    
    def create_deployment_info(self):
        """Criar arquivo com informa√ß√µes do deployment"""
        deploy_info = {
            "domain": self.domain,
            "deployed_at": datetime.now().isoformat(),
            "version": "1.0.0",
            "main_page": "index.html",
            "features": [
                "Mapa meteorol√≥gico interativo",
                "Dados oceanogr√°ficos em tempo real",
                "Visualiza√ß√£o 3D",
                "PWA (Progressive Web App)",
                "Responsivo para mobile"
            ],
            "external_services": [
                "EOX Maps",
                "OpenStreetMap",
                "GEBCO Bathymetry",
                "CartoDB",
                "ESRI"
            ],
            "requirements": {
                "https": "Recomendado",
                "modern_browser": "Requerido",
                "javascript": "Requerido"
            }
        }
        
        info_path = self.deploy_dir / "deployment_info.json"
        with open(info_path, 'w', encoding='utf-8') as f:
            json.dump(deploy_info, f, indent=2, ensure_ascii=False)
        
        self.log("Informa√ß√µes do deployment criadas")
    
    def create_readme(self):
        """Criar README para o deployment"""
        readme_content = f"""# BGAPP - Deploy para {self.domain}

## üåä Sobre o BGAPP

O BGAPP √© um sistema avan√ßado de monitoramento oceanogr√°fico e meteorol√≥gico marinho de Angola, oferecendo visualiza√ß√£o interativa de dados em tempo real.

## üöÄ Deployment

**Dom√≠nio:** {self.domain}  
**P√°gina Principal:** index.html  
**Deployed em:** {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}

## üìã Arquivos Principais

- `index.html` - P√°gina principal da aplica√ß√£o
- `assets/` - Recursos est√°ticos (CSS, JS, imagens)
- `manifest.json` - Configura√ß√£o PWA
- `sw.js` - Service Worker
- `.htaccess` - Configura√ß√µes do servidor

## üéØ Funcionalidades

- ‚úÖ Mapa meteorol√≥gico interativo
- ‚úÖ Dados oceanogr√°ficos em tempo real (SST, Salinidade, Clorofila)
- ‚úÖ Campos vetoriais (Correntes, Vento)
- ‚úÖ Visualiza√ß√£o 3D (em desenvolvimento)
- ‚úÖ PWA com suporte offline
- ‚úÖ Interface responsiva para mobile
- ‚úÖ Sistema de cache inteligente
- ‚úÖ Notifica√ß√µes e feedback visual

## üåê Servi√ßos Externos Integrados

- **EOX Maps** - Camadas de terreno e batimetria
- **OpenStreetMap** - Mapas base
- **GEBCO** - Dados batim√©tricos
- **CartoDB** - Camadas tem√°ticas
- **ESRI** - Imagens de sat√©lite

## üîß Requisitos T√©cnicos

- ‚úÖ Servidor web com suporte a HTTPS (recomendado)
- ‚úÖ Navegador moderno com suporte a ES6+
- ‚úÖ JavaScript habilitado
- ‚úÖ Conex√£o √† internet para servi√ßos externos

## üì± Compatibilidade

- **Desktop:** Chrome, Firefox, Safari, Edge (vers√µes recentes)
- **Mobile:** iOS Safari, Android Chrome
- **Tablet:** Suporte completo

## üîí Seguran√ßa

- Content Security Policy (CSP) configurada
- Headers de seguran√ßa aplicados
- Redirecionamento autom√°tico para HTTPS
- Prote√ß√£o contra XSS e clickjacking

## üöÄ Como Usar

1. Acesse https://{self.domain}
2. O sistema carregar√° automaticamente a p√°gina index.html
3. Aguarde a inicializa√ß√£o dos mapas
4. Use os controles do painel lateral para:
   - Filtrar dados por data
   - Ativar/desativar camadas
   - Iniciar anima√ß√µes temporais
   - Limpar visualiza√ß√µes

## üìû Suporte

Para suporte t√©cnico ou d√∫vidas:
- Email: majearcasa@gmail.com
- Organiza√ß√£o: ARCASA DEVELOPING

## üìÑ Licen√ßa

¬© 2025 ARCASA DEVELOPING - Todos os direitos reservados
"""
        
        readme_path = self.deploy_dir / "README.md"
        with open(readme_path, 'w', encoding='utf-8') as f:
            f.write(readme_content)
        
        self.log("README.md criado")
    
    def create_upload_script(self):
        """Criar script para upload via FTP/SFTP"""
        upload_script = f"""#!/bin/bash
# Script para upload do BGAPP para {self.domain}

echo "üöÄ Iniciando upload para {self.domain}..."

# Configura√ß√µes (ajuste conforme necess√°rio)
DOMAIN="{self.domain}"
FTP_USER="seu_usuario_ftp"
FTP_PASS="sua_senha_ftp"
REMOTE_DIR="/public_html"  # ou /www, /htdocs, etc.

# Verificar se o diret√≥rio de deploy existe
if [ ! -d "deploy_arcasadeveloping" ]; then
    echo "‚ùå Diret√≥rio deploy_arcasadeveloping n√£o encontrado!"
    echo "üí° Execute primeiro: python3 deploy_to_arcasadeveloping.py"
    exit 1
fi

echo "üìÅ Preparando arquivos para upload..."
cd deploy_arcasadeveloping

# Op√ß√£o 1: Upload via SFTP (recomendado)
echo "üîê Usando SFTP para upload seguro..."
sftp $FTP_USER@$DOMAIN << EOF
cd $REMOTE_DIR
put -r *
bye
EOF

# Op√ß√£o 2: Upload via FTP (descomente se necess√°rio)
# echo "üì§ Usando FTP para upload..."
# ftp -n $DOMAIN << EOF
# user $FTP_USER $FTP_PASS
# cd $REMOTE_DIR
# binary
# prompt off
# mput *
# mput -r assets
# quit
# EOF

echo "‚úÖ Upload conclu√≠do!"
echo "üåê Verifique em: https://$DOMAIN"
echo ""
echo "üìã Pr√≥ximos passos:"
echo "1. Acesse https://$DOMAIN para verificar o site"
echo "2. Teste todas as funcionalidades"
echo "3. Verifique se index.html √© carregado automaticamente"
echo "4. Configure SSL/HTTPS se ainda n√£o estiver ativo"
"""
        
        script_path = self.deploy_dir / "upload_to_server.sh"
        with open(script_path, 'w', encoding='utf-8') as f:
            f.write(upload_script)
        
        # Tornar execut√°vel
        os.chmod(script_path, 0o755)
        self.log("Script de upload criado: upload_to_server.sh")
    
    def verify_deployment(self):
        """Verificar se o deployment est√° correto"""
        self.log("Verificando deployment...")
        
        # Verificar arquivos essenciais
        essential_files = [
            "index.html",
            "assets/css/map-styles.css",
            "assets/js/eox-layers.js",
            "manifest.json",
            ".htaccess"
        ]
        
        missing = []
        for file_path in essential_files:
            if not (self.deploy_dir / file_path).exists():
                missing.append(file_path)
        
        if missing:
            self.log(f"Arquivos essenciais n√£o encontrados: {missing}", "ERROR")
            return False
        
        # Verificar se index.html tem conte√∫do
        index_path = self.deploy_dir / "index.html"
        if index_path.stat().st_size < 1000:
            self.log("index.html parece estar vazio ou corrompido", "ERROR")
            return False
        
        self.log("Deployment verificado com sucesso", "SUCCESS")
        return True
    
    def run_deployment(self):
        """Executar todo o processo de deployment"""
        self.log("üöÄ Iniciando deployment para arcasadeveloping.org", "SUCCESS")
        
        try:
            # Etapas do deployment
            if not self.verify_project_structure():
                return False
            
            self.create_deploy_directory()
            self.copy_frontend_files()
            self.create_htaccess()
            self.update_production_config()
            self.create_deployment_info()
            self.create_readme()
            self.create_upload_script()
            
            if not self.verify_deployment():
                return False
            
            self.log("üéâ DEPLOYMENT CONCLU√çDO COM SUCESSO!", "SUCCESS")
            self.log(f"üìÅ Arquivos prontos em: {self.deploy_dir}")
            self.log(f"üåê Para upload: execute ./upload_to_server.sh")
            self.log(f"üîó Site ser√° acess√≠vel em: https://{self.domain}")
            
            return True
            
        except Exception as e:
            self.log(f"Erro durante o deployment: {str(e)}", "ERROR")
            return False

def main():
    """Fun√ß√£o principal"""
    print("üåä BGAPP - Deploy Manager para arcasadeveloping.org")
    print("=" * 60)
    
    deploy_manager = BGAPPDeployManager()
    
    if deploy_manager.run_deployment():
        print("\nüéâ Deployment preparado com sucesso!")
        print("\nüìã Pr√≥ximos passos:")
        print("1. Revise os arquivos no diret√≥rio 'deploy_arcasadeveloping'")
        print("2. Configure suas credenciais FTP/SFTP no script upload_to_server.sh")
        print("3. Execute o upload: ./deploy_arcasadeveloping/upload_to_server.sh")
        print("4. Acesse https://arcasadeveloping.org para verificar")
        return 0
    else:
        print("\n‚ùå Falha no deployment. Verifique os logs acima.")
        return 1

if __name__ == "__main__":
    sys.exit(main())
