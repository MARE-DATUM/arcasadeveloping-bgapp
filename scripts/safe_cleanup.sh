#!/bin/bash

# üßπ BGAPP Safe Cleanup Script
# Limpeza ultra-segura apenas de arquivos comprovadamente seguros
# EXTREMO CUIDADO - Apenas arquivos obviamente desnecess√°rios
# Author: BGAPP Team

set -e

# Colors
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
BOLD='\033[1m'
NC='\033[0m'

CLEANUP_REPORT="SAFE_CLEANUP_REPORT_$(date +%Y%m%d_%H%M%S).md"
BACKUP_DIR="cleanup_backup_$(date +%Y%m%d_%H%M%S)"

log() {
    echo -e "${2:-$NC}$1${NC}" | tee -a "$CLEANUP_REPORT"
}

print_header() {
    echo -e "${CYAN}${BOLD}"
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "‚ïë              üßπ BGAPP SAFE CLEANUP SYSTEM                    ‚ïë"
    echo "‚ïë          APENAS ARQUIVOS COMPROVADAMENTE SEGUROS            ‚ïë"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo -e "${NC}"
}

create_safety_backup() {
    log "üíæ Criando backup de seguran√ßa antes da limpeza..." "$BLUE"
    
    mkdir -p "$BACKUP_DIR"
    
    # Backup completo da estrutura cr√≠tica
    cp wrangler.toml "$BACKUP_DIR/" 2>/dev/null || true
    cp package.json "$BACKUP_DIR/" 2>/dev/null || true
    cp -r infra/frontend/ "$BACKUP_DIR/frontend_backup/" 2>/dev/null || true
    cp -r admin-dashboard/src/ "$BACKUP_DIR/admin_src_backup/" 2>/dev/null || true
    
    log "   ‚úÖ Backup de seguran√ßa criado: $BACKUP_DIR" "$GREEN"
}

initialize_report() {
    cat > "$CLEANUP_REPORT" << EOF
# üßπ BGAPP Safe Cleanup Report

**Data:** $(date '+%Y-%m-%d %H:%M:%S')  
**Tipo:** Limpeza Ultra-Segura  
**Status:** üõ°Ô∏è APENAS ARQUIVOS COMPROVADAMENTE SEGUROS

## ‚ö†Ô∏è AVISO DE SEGURAN√áA
Esta limpeza remove APENAS arquivos obviamente desnecess√°rios:
- Arquivos .backup claramente tempor√°rios
- Arquivos .old n√£o cr√≠ticos
- Cache e arquivos tempor√°rios seguros

**FUNCIONALIDADE DA BGAPP PRESERVADA 100%**

---

EOF
}

identify_safe_backups() {
    log "üîç Identificando backups seguros para remo√ß√£o..." "$BLUE"
    
    local safe_backups=0
    local backup_list=""
    
    # Identificar apenas backups √≥bvios e seguros
    while IFS= read -r -d '' backup_file; do
        # Verificar se √© realmente um backup seguro
        if [[ "$backup_file" =~ \.(backup|old)$ ]] && [[ ! "$backup_file" =~ (wrangler|package|config) ]]; then
            backup_list+="$backup_file\n"
            ((safe_backups++))
        fi
    done < <(find . -name "*.backup" -o -name "*.old" ! -path "./node_modules/*" ! -path "./.git/*" ! -path "./docs/organized/*" -print0 2>/dev/null || true)
    
    log "   üìä Backups seguros identificados: $safe_backups" "$CYAN"
    
    if [[ $safe_backups -gt 0 ]]; then
        log "   üìã Arquivos identificados:" "$YELLOW"
        echo -e "$backup_list" | head -10 | while read -r file; do
            [[ -n "$file" ]] && log "     üìÑ $file" "$YELLOW"
        done
    fi
    
    echo "$safe_backups"
}

identify_safe_temp_files() {
    log "üóÇÔ∏è Identificando arquivos tempor√°rios seguros..." "$BLUE"
    
    local temp_files=0
    
    # Identificar apenas arquivos tempor√°rios √≥bvios
    while IFS= read -r -d '' temp_file; do
        ((temp_files++))
    done < <(find . -name "*.tmp" -o -name "*~" -o -name ".DS_Store" ! -path "./node_modules/*" ! -path "./.git/*" -print0 2>/dev/null || true)
    
    log "   üìä Arquivos tempor√°rios seguros: $temp_files" "$CYAN"
    
    echo "$temp_files"
}

safe_cleanup_backups() {
    local dry_run="$1"
    log "üßπ $([ "$dry_run" == "true" ] && echo "Simulando" || echo "Executando") limpeza de backups seguros..." "$BLUE"
    
    local cleaned=0
    local total_size=0
    
    # Limpar apenas backups HTML claramente seguros
    while IFS= read -r -d '' backup_file; do
        if [[ "$backup_file" =~ \.html\.backup\. ]] && [[ ! "$backup_file" =~ (index|admin|dashboard) ]]; then
            local size=$(stat -f%z "$backup_file" 2>/dev/null || echo "0")
            ((total_size += size))
            
            if [[ "$dry_run" != "true" ]]; then
                rm -f "$backup_file"
                log "   ‚úÖ Removido: $backup_file ($(numfmt --to=iec $size))" "$GREEN"
            else
                log "   üìã Seria removido: $backup_file ($(numfmt --to=iec $size))" "$YELLOW"
            fi
            ((cleaned++))
        fi
    done < <(find . -name "*.html.backup.*" ! -path "./node_modules/*" ! -path "./.git/*" -print0 2>/dev/null || true)
    
    log "   üìä Backups processados: $cleaned ($(numfmt --to=iec $total_size) total)" "$CYAN"
    
    cat >> "$CLEANUP_REPORT" << EOF
### üóÇÔ∏è Limpeza de Backups
- **Arquivos processados:** $cleaned
- **Espa√ßo $([ "$dry_run" == "true" ] && echo "que seria" || echo "") liberado:** $(numfmt --to=iec $total_size)
- **Tipo:** Apenas backups HTML n√£o cr√≠ticos

EOF
}

safe_cleanup_temp_files() {
    local dry_run="$1"
    log "üóëÔ∏è $([ "$dry_run" == "true" ] && echo "Simulando" || echo "Executando") limpeza de arquivos tempor√°rios..." "$BLUE"
    
    local cleaned=0
    local total_size=0
    
    # Limpar apenas arquivos tempor√°rios √≥bvios e seguros
    for pattern in "*.tmp" "*~" ".DS_Store"; do
        while IFS= read -r -d '' temp_file; do
            local size=$(stat -f%z "$temp_file" 2>/dev/null || echo "0")
            ((total_size += size))
            
            if [[ "$dry_run" != "true" ]]; then
                rm -f "$temp_file"
                log "   ‚úÖ Removido: $temp_file" "$GREEN"
            else
                log "   üìã Seria removido: $temp_file" "$YELLOW"
            fi
            ((cleaned++))
        done < <(find . -name "$pattern" ! -path "./node_modules/*" ! -path "./.git/*" ! -path "./docs/organized/*" -print0 2>/dev/null || true)
    done
    
    log "   üìä Arquivos tempor√°rios processados: $cleaned ($(numfmt --to=iec $total_size) total)" "$CYAN"
    
    cat >> "$CLEANUP_REPORT" << EOF
### üóëÔ∏è Limpeza de Tempor√°rios
- **Arquivos processados:** $cleaned
- **Espa√ßo $([ "$dry_run" == "true" ] && echo "que seria" || echo "") liberado:** $(numfmt --to=iec $total_size)
- **Tipo:** Apenas arquivos tempor√°rios √≥bvios (.tmp, ~, .DS_Store)

EOF
}

verify_bgapp_integrity() {
    log "üîç Verificando integridade da BGAPP ap√≥s limpeza..." "$BLUE"
    
    local critical_files=(
        "wrangler.toml"
        "package.json"
        "infra/frontend/index.html"
        "admin-dashboard/package.json"
    )
    
    local all_good=true
    for file in "${critical_files[@]}"; do
        if [[ -f "$file" ]]; then
            log "   ‚úÖ $file" "$GREEN"
        else
            log "   ‚ùå CR√çTICO: $file ausente!" "$RED"
            all_good=false
        fi
    done
    
    if [[ "$all_good" == "true" ]]; then
        log "   üéâ BGAPP 100% √≠ntegra ap√≥s limpeza!" "$GREEN"
        return 0
    else
        log "   ‚ö†Ô∏è PROBLEMA: Restaurar backup imediatamente!" "$RED"
        return 1
    fi
}

generate_final_report() {
    local status="$1"
    
    cat >> "$CLEANUP_REPORT" << EOF

## üéØ Resultado Final

$([ "$status" -eq 0 ] && echo "‚úÖ **Limpeza realizada com sucesso!**" || echo "‚ùå **Problema detectado - Backup deve ser restaurado!**")

### üõ°Ô∏è Garantias de Seguran√ßa
- ‚úÖ Apenas arquivos comprovadamente seguros foram removidos
- ‚úÖ Backup completo criado antes da limpeza
- ‚úÖ Integridade da BGAPP verificada
- ‚úÖ Funcionalidade 100% preservada

### üìä Resumo
- Foram removidos apenas arquivos tempor√°rios √≥bvios
- Nenhum arquivo funcional foi afetado
- Sistema permanece totalmente operacional

### üîÑ Rollback (se necess√°rio)
Para restaurar backup:
\`\`\`bash
cp -r $BACKUP_DIR/* ./
\`\`\`

---

*Limpeza Segura BGAPP - $(date '+%Y-%m-%d %H:%M:%S')*
EOF
}

main() {
    local dry_run=false
    
    # Verificar argumentos
    if [[ "${1:-}" == "--dry-run" ]]; then
        dry_run=true
        log "üîç MODO SIMULA√á√ÉO: Nenhum arquivo ser√° removido" "$YELLOW"
    fi
    
    print_header
    
    log "üßπ Iniciando limpeza ultra-segura da BGAPP..." "$BLUE"
    log "‚ö†Ô∏è  ATEN√á√ÉO: Apenas arquivos comprovadamente seguros ser√£o removidos" "$YELLOW"
    log ""
    
    initialize_report
    
    # Criar backup de seguran√ßa
    if [[ "$dry_run" != "true" ]]; then
        create_safety_backup
        log ""
    fi
    
    # Identificar arquivos seguros
    local safe_backups=$(identify_safe_backups)
    log ""
    
    local temp_files=$(identify_safe_temp_files)
    log ""
    
    # Executar limpeza segura
    safe_cleanup_backups "$dry_run"
    log ""
    
    safe_cleanup_temp_files "$dry_run"
    log ""
    
    # Verificar integridade (apenas se n√£o for dry-run)
    local status=0
    if [[ "$dry_run" != "true" ]]; then
        if ! verify_bgapp_integrity; then
            status=1
        fi
        log ""
    fi
    
    # Gerar relat√≥rio final
    generate_final_report $status
    
    if [[ "$dry_run" == "true" ]]; then
        log "üîç SIMULA√á√ÉO CONCLU√çDA!" "$CYAN"
        log "üìã Execute sem --dry-run para aplicar as mudan√ßas" "$YELLOW"
    else
        if [[ $status -eq 0 ]]; then
            log "üéâ LIMPEZA SEGURA CONCLU√çDA!" "$GREEN"
            log "‚úÖ BGAPP permanece 100% funcional" "$GREEN"
        else
            log "‚ùå PROBLEMA DETECTADO!" "$RED"
            log "üîÑ Restaure o backup imediatamente!" "$RED"
        fi
    fi
    
    log "üìã Relat√≥rio completo: $CLEANUP_REPORT" "$CYAN"
    [[ "$dry_run" != "true" ]] && log "üíæ Backup dispon√≠vel: $BACKUP_DIR" "$CYAN"
    
    return $status
}

# Executar limpeza
main "$@"
